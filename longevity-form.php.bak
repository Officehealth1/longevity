// OpenAI API Integration for Longevity Analysis
add_action('wp_ajax_longevity_ai_analysis', 'longevity_ai_analysis_callback');
add_action('wp_ajax_nopriv_longevity_ai_analysis', 'longevity_ai_analysis_callback');

// *** NEW: AJAX Action for sending data to Make.com ***
add_action('wp_ajax_send_to_make', 'handle_send_to_make_webhook');
add_action('wp_ajax_nopriv_send_to_make', 'handle_send_to_make_webhook');

// Initialize OpenAI API Key - Improved security
function longevity_store_openai_api_key() {
    // Only create the option if it doesn't exist
    if (!get_option('longevity_openai_api_key')) {
        update_option('longevity_openai_api_key', '');
    }
}
add_action('init', 'longevity_store_openai_api_key');

// Add admin menu for API key management
function longevity_admin_menu() {
    add_options_page(
        'Longevity Assessment Settings',
        'Longevity Settings',
        'manage_options',
        'longevity-settings',
        'longevity_settings_page'
    );
}
add_action('admin_menu', 'longevity_admin_menu');

// Settings page content
function longevity_settings_page() {
    // Save settings if form is submitted
    if (isset($_POST['longevity_settings_nonce']) && wp_verify_nonce($_POST['longevity_settings_nonce'], 'longevity_save_settings')) {
        if (isset($_POST['openai_api_key'])) {
            update_option('longevity_openai_api_key', sanitize_text_field($_POST['openai_api_key']));
            echo '<div class="notice notice-success"><p>Settings saved successfully!</p></div>';
        }
    }
    
    // Get current API key (show only first/last 4 chars if exists)
    $api_key = get_option('longevity_openai_api_key', '');
    $masked_key = '';
    if (!empty($api_key)) {
        $length = strlen($api_key);
        if ($length > 8) {
            $masked_key = substr($api_key, 0, 4) . str_repeat('•', $length - 8) . substr($api_key, -4);
        } else {
            $masked_key = $api_key; // Key is too short to mask effectively
        }
    }
    
    // Display settings form
    ?>
    <div class="wrap">
        <h1>Longevity Assessment Settings</h1>
        <form method="post" action="">
            <?php wp_nonce_field('longevity_save_settings', 'longevity_settings_nonce'); ?>
            <table class="form-table">
                <tr>
                    <th scope="row"><label for="openai_api_key">OpenAI API Key</label></th>
                    <td>
                        <input type="password" id="openai_api_key" name="openai_api_key" 
                               value="<?php echo esc_attr($api_key); ?>" class="regular-text" autocomplete="off">
                        <?php if (!empty($masked_key)): ?>
                            <p class="description">Current key: <?php echo esc_html($masked_key); ?></p>
                        <?php endif; ?>
                        <p class="description">Enter your OpenAI API key for AI analysis functionality.</p>
                    </td>
                </tr>
            </table>
            <p class="submit">
                <input type="submit" name="submit" id="submit" class="button button-primary" value="Save Changes">
            </p>
        </form>
    </div>
    <?php
}

function longevity_ai_analysis_callback() {
    // Basic security check
    check_ajax_referer('longevity_form_nonce', 'security');
    
    // Get the OpenAI API key from WordPress options
    $api_key = get_option('longevity_openai_api_key');
    
    // Check if API key exists
    if (!$api_key || $api_key === 'sk-REPLACE_WITH_YOUR_API_KEY') {
        wp_send_json_error(array('message' => 'API key not configured. Please contact the site administrator.'));
        return;
    }
    
    // Get data from the AJAX request
    $analysis_data = isset($_POST['analysis_data']) ? $_POST['analysis_data'] : null;
    
    if (!$analysis_data) {
        wp_send_json_error(array('message' => 'No data provided for analysis.'));
        return;
    }
    
    // Sanitize and prepare data for OpenAI
    $decoded_data = json_decode(stripslashes($analysis_data), true);
    
    // Format user data string (to be used in all prompts)
    $user_data = "USER DATA:\n";
    $user_data .= "Age: " . $decoded_data['age'] . "\n";
    $user_data .= "Gender: " . $decoded_data['gender'] . "\n";
    $user_data .= "Biological Age: " . $decoded_data['biologicalAge'] . " years (";
    $user_data .= $decoded_data['ageShift'] > 0 ? "+" : "";
    $user_data .= $decoded_data['ageShift'] . " years from chronological age)\n";
    $user_data .= "Aging Rate: " . $decoded_data['agingRate'] . "\n";
    $user_data .= "BMI: " . $decoded_data['bmi'] . " (" . $decoded_data['bmiCategory'] . ")\n";
    $user_data .= "WHR: " . $decoded_data['whr'] . " (" . $decoded_data['whrCategory'] . ")\n\n";
    
    $user_data .= "SCORES (on scale of 0-5, where 5 is optimal):\n";
    foreach ($decoded_data['scores'] as $metric => $score) {
        // Format the metric name to be more readable
        $formatted_metric = ucwords(preg_replace('/(?<!^)[A-Z]/', ' $0', $metric));
        $user_data .= "$formatted_metric: $score\n";
    }
    
    $user_data .= "\nPOSITIVE FACTORS:\n";
    if (!empty($decoded_data['positiveFactors'])) {
        foreach ($decoded_data['positiveFactors'] as $factor) {
            $user_data .= "- " . $factor['name'] . " (Impact: " . number_format($factor['impact'], 2) . ")\n";
        }
    } else {
        $user_data .= "None identified\n";
    }
    
    $user_data .= "\nNEGATIVE FACTORS:\n";
    if (!empty($decoded_data['negativeFactors'])) {
        foreach ($decoded_data['negativeFactors'] as $factor) {
            $user_data .= "- " . $factor['name'] . " (Impact: " . number_format($factor['impact'], 2) . ")\n";
        }
    } else {
        $user_data .= "None identified\n";
    }
    
    // --- NEW: Extract health challenges and goals from decoded data ---
    $health_challenges = isset($decoded_data['healthChallenges']) ? sanitize_textarea_field($decoded_data['healthChallenges']) : 'Not provided';
    $health_goals = isset($decoded_data['healthGoals']) ? sanitize_textarea_field($decoded_data['healthGoals']) : 'Not provided';
    // --- END NEW ---
    
    // --- NEW: Add challenges and goals to user data string --- 
    $user_data .= "\nMAIN HEALTH CHALLENGES:\n";
    $user_data .= $health_challenges . "\n";
    
    $user_data .= "\nDESIRED HEALTH CHANGES/SHIFTS:\n";
    $user_data .= $health_goals . "\n";
    // --- END NEW ---
    
    // --- Send Data to Make.com Webhook ---
    // $make_webhook_url = 'https://hook.eu2.make.com/rb1qjeq2waa8s7g1pd527j2te8fukovg';
    // Prepare data payload matching your Make.com scenario expectations
    // Use $decoded_data which contains the form inputs
    // $make_payload = array(
    //     'fullName' => isset($decoded_data['fullName']) ? sanitize_text_field($decoded_data['fullName']) : 'N/A',
    //     'email' => isset($decoded_data['email']) ? sanitize_email($decoded_data['email']) : 'N/A',
    //     'age' => $decoded_data['age'],
    //     'gender' => $decoded_data['gender'],
    //     'biologicalAge' => $decoded_data['biologicalAge'],
    //     'ageShift' => $decoded_data['ageShift'],
    //     'agingRate' => $decoded_data['agingRate'],
    //     'bmi' => $decoded_data['bmi'],
    //     'bmiCategory' => $decoded_data['bmiCategory'],
    //     'whr' => $decoded_data['whr'],
    //     'whrCategory' => $decoded_data['whrCategory'],
    //     'scores' => $decoded_data['scores'], // Send all scores
    //     'positiveFactors' => $decoded_data['positiveFactors'], // Send positive factors
    //     'negativeFactors' => $decoded_data['negativeFactors'], // Send negative factors
    //     'healthChallenges' => $health_challenges,
    //     'healthGoals' => $health_goals,
    //     // Add any other fields from $decoded_data needed for your PDFMonkey template
    // );

    // // Send the data asynchronously
    // wp_remote_post($make_webhook_url, array(
    //     'method' => 'POST',
    //     'headers' => array('Content-Type' => 'application/json; charset=utf-8'),
    //     'body' => json_encode($make_payload),
    //     'blocking' => false, // Set to false for non-blocking request
    //     'data_format' => 'body',
    // ));
    // error_log('Longevity form data sent to Make.com webhook.'); 
    // --- End Send Data to Make.com Webhook ---
    
    // --- UPDATED: Modify prompts to use new context --- 
    ` explicitly state the actual lifestyle score as provided in the user data (value between 0-5). Keep it optimistic, actionable, concise, and supportive (max 80 words).";
    $prompts['recommendations'] = "Generate specific, concise, and actionable health recommendations tailored explicitly for this client, taking into account their stated health challenges and desired changes/shifts. Group recommendations into three clear categories: immediate actions (short-term), ongoing habits (long-term), and expert consultations or screenings. Each recommendation should include a brief (one-sentence) rationale and be presented positively and clearly.";
    // --- END UPDATED ---
    
    // Define premium prompts from prompt.txt
    $prompts = array(
        'introduction' => "You are writing the introductory summary for a premium longevity health assessment report targeted at a wealthy, discerning clientele. Using a warm, confident, and professional tone, summarise the client's overall health status, highlighting their biological age versus chronological age, and their lifestyle strengths. Keep it concise (50-70 words) and encouraging.",
        
        'biologicalAge' => "Clearly explain the client's biological age, chronological age, and rate of ageing in simple, positive terms suitable for a premium health report. Highlight positively if biological age is lower or gently indicate the need for improvement if higher. Encourage continuing good habits or initiating improvements as needed (max 60 words).",
        
        'lifestyleScore' => "Provide a concise yet insightful analysis of the client's lifestyle score (0-5), clearly stating their current level, briefly explaining what this indicates about their overall health habits, and encouraging them towards maintaining or improving this score (max 50 words).",
        
        'bodyComposition' => "Generate a clear, concise interpretation of the client's BMI and waist-to-hip ratio, specifically mentioning their health risk category. Explain briefly the health implications of these scores. If scores indicate moderate/high risk, provide encouraging and gentle language prompting actionable improvements (max 70 words).",
        
        'strengthsAreas' => "Analyse and summarise clearly and positively the client's health data, listing 3-4 clear strengths first, followed by up to three primary areas for improvement. Use brief bullet points for clarity and easy readability, suitable for a premium client. Tone should be supportive and empowering.",
        
         explicitly state the actual lifestyle score as provided in the user data (value between 0-5). Keep it optimistic, actionable, concise, and supportive (max 80 words).",
        
        'recommendations' => "Generate specific, concise, and actionable health recommendations tailored explicitly for this client, taking into account their stated health challenges and desired changes/shifts. Group recommendations into three clear categories: immediate actions (short-term), ongoing habits (long-term), and expert consultations or screenings. Each recommendation should include a brief (one-sentence) rationale and be presented positively and clearly.",
        
        'closing' => "End the longevity report on an empowering and motivating note. Emphasise the powerful ability of the body to regenerate and improve at any age. Encourage the client to adopt the identity of someone who naturally prioritises health, fitness, and wellbeing, using inspiring yet authentic language suitable for an upscale client (max 50 words).",
        
        // Updated CTA prompt for button text
        'cta' => "Generate two very short (2-4 words max each), premium-style button texts. The first text should invite the client to schedule a follow-up consultation (e.g., 'Schedule Consultation'). The second text should invite them to explore advanced programs (e.g., 'Explore Advanced Programs'). Respond ONLY with the text for the buttons, following the requested JSON structure { consultation: \"Button text 1\", programs: \"Button text 2\" }.",
        
        // Add missing prompts required by PDFMonkey template
        'ageAssessment' => "Analyze the client's biological age versus chronological age data. Provide a clear interpretation of what this means for their overall health and longevity. Highlight both positive aspects and areas needing attention (max 150 words).",
        
        'chronologicalVsBio' => "Explain how the client's specific lifestyle factors have influenced their biological age versus chronological age. Provide personalized insights based on their assessment data and health metrics (max 120 words).",
        
        'agingProcesses' => "Describe how aging occurs at the cellular and systemic level, relating this to the client's specific health metrics and lifestyle choices. Focus on actionable insights that connect their daily habits to aging processes (max 120 words).",
        
        'researchAndWisdom' => "Connect modern longevity research with traditional health wisdom, highlighting principles that have proven effective across cultures and time. Relate this to the client's health data wherever possible (max 120 words).",
        
        'lifespanHealthspan' => "Explain the critical distinction between lifespan and healthspan in the context of the client's assessment results. Emphasize how specific lifestyle changes can extend active, functional health years (max 120 words).",
        
        'longevityInfluencesExplanation' => "Interpret the client's health metrics radar chart in simple terms. Explain what each score means for longevity and how improving specific areas could positively affect overall aging (max 100 words).",
        
        'ageImpactAnalysis' => "Using the client's positive and negative impact factors (factors lowering and raising biological age), provide a personalized analysis of how these specific factors are affecting their health. Focus on actionable insights for both maintaining positive factors and addressing negative ones. Include specific references to the factors shown in their assessment. (max 150 words).",
        
        'keyFindings' => "Summarize 3-4 key findings from the client's assessment in an executive summary style. Highlight the most significant insights about their biological age, greatest strengths, and priority areas for attention. Keep it concise, clear, and actionable (max 100 words)."
    );
    
    // Create a single comprehensive prompt
    $comprehensive_prompt = "Based on the following user data:\n\n" . $user_data . "\n\nGenerate a premium health analysis with multiple sections. Format your response as a JSON object with the following keys that match exactly:\n\n";
    
    foreach ($prompts as $section => $instruction) {
        $comprehensive_prompt .= "\"$section\": $instruction\n\n";
    }
    
    $comprehensive_prompt .= "For structured sections like 'strengthsAreas' and 'recommendations', format your response as nested objects with appropriate keys (e.g., strengths, improvements, immediate, ongoing, consultations, consultation, programs). Ensure all text is well-formatted, professional, and without markdown formatting.";
    
    // Create the system prompt
    $system_prompt = 'You are an expert health and longevity analysis assistant for a premium wellness service. Your responses will be included in a professional health assessment report for wealthy, discerning clients. Your analysis must be evidence-based, personalized, and formatted specifically as requested. Focus on being concise, inspiring, and actionable while maintaining a premium, confident tone.';
    
    // Set up the API request with a single comprehensive prompt
    $args = array(
        'headers' => array(
            'Authorization' => 'Bearer ' . $api_key,
            'Content-Type' => 'application/json'
        ),
        'body' => json_encode(array(
            'model' => 'gpt-4o',
            'messages' => array(
                array(
                    'role' => 'system',
                    'content' => $system_prompt
                ),
                array(
                    'role' => 'user',
                    'content' => $comprehensive_prompt
                )
            ),
            'max_tokens' => 2000,
            'temperature' => 0.7,
            'response_format' => array('type' => 'json_object')
        )),
        'timeout' => 60 // Increased timeout for longer processing
    );
    
    // Make the request to OpenAI
    $response = wp_remote_post('https://api.openai.com/v1/chat/completions', $args);
    
    // Check for errors
    if (is_wp_error($response)) {
        $error_message = $response->get_error_message();
        error_log('OpenAI API request failed: ' . $error_message);
        wp_send_json_error(array(
            'message' => 'Connection to AI service failed: ' . $error_message,
            'debug' => 'WP_Error occurred'
        ));
        return;
    }
    
    // Get the response code and body
    $response_code = wp_remote_retrieve_response_code($response);
    $body = wp_remote_retrieve_body($response);
    
    // Log the response for debugging
    error_log('OpenAI API response code: ' . $response_code);
    error_log('OpenAI API response body (truncated): ' . substr($body, 0, 500));
    
    // Check if the response code is not 200 OK
    if ($response_code !== 200) {
        error_log('OpenAI API request failed with code ' . $response_code . ': ' . $body);
        wp_send_json_error(array(
            'message' => 'AI service returned an error: ' . $response_code,
            'debug' => $body
        ));
        return;
    }
    
    // Parse the JSON response
    $response_data = json_decode($body, true);
    
    // Extract the AI-generated content
    if (isset($response_data['choices'][0]['message']['content'])) {
        $ai_response = $response_data['choices'][0]['message']['content'];
        error_log('AI response content: ' . substr($ai_response, 0, 500) . '...');
        
        // Parse the JSON response
        try {
            $analysis_results = json_decode($ai_response, true);
            
            // Validate and format the response
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception('Invalid JSON response from AI service');
            }
            
            // --- NEW: Prepare and Send COMPLETE data to Make.com --- 
            // $make_webhook_url = 'https://hook.eu2.make.com/rb1qjeq2waa8s7g1pd527j2te8fukovg';
            // Prepare the *initial* payload (same as before, but we'll add AI results)
            // $make_payload = array(
            //     'fullName' => isset($decoded_data['fullName']) ? sanitize_text_field($decoded_data['fullName']) : 'N/A',
            //     'email' => isset($decoded_data['email']) ? sanitize_email($decoded_data['email']) : 'N/A',
            //     'age' => $decoded_data['age'],
            //     'gender' => $decoded_data['gender'],
            //     'biologicalAge' => $decoded_data['biologicalAge'],
            //     'ageShift' => $decoded_data['ageShift'],
            //     'agingRate' => $decoded_data['agingRate'],
            //     'bmi' => $decoded_data['bmi'],
            //     'bmiCategory' => $decoded_data['bmiCategory'],
            //     'whr' => $decoded_data['whr'],
            //     'whrCategory' => $decoded_data['whrCategory'],
            //     'scores' => $decoded_data['scores'], 
            //     'positiveFactors' => $decoded_data['positiveFactors'], 
            //     'negativeFactors' => $decoded_data['negativeFactors'], 
            //     'healthChallenges' => $health_challenges,
            //     'healthGoals' => $health_goals
            //     // AI results will be added next
            // );
            
            // // Add the AI analysis results under the 'ai_results' key
            // // This matches the structure expected by your Make.com payload template
            // $make_payload['ai_results'] = $analysis_results; 
            
            // // Send the COMPLETE data payload asynchronously to Make.com
            // $webhook_response = wp_remote_post($make_webhook_url, array(
            //     'method' => 'POST',
            //     'headers' => array('Content-Type' => 'application/json; charset=utf-8'),
            //     'body' => json_encode($make_payload), // Send the merged payload
            //     'blocking' => false, // Keep it non-blocking
            //     'data_format' => 'body',
            // ));
            
            // // Log if sending to webhook failed
            // if (is_wp_error($webhook_response)) {
            //     error_log('Make.com webhook request failed: ' . $webhook_response->get_error_message());
            // } else {
            //      error_log('Longevity form data including AI results sent to Make.com webhook.'); 
            // }
            // --- END NEW --- 
            
            // Send the results back to the client browser (as before)
            wp_send_json_success($analysis_results);
        } catch (Exception $e) {
            error_log('Error parsing AI response: ' . $e->getMessage());
            error_log('AI response: ' . $ai_response);
            wp_send_json_error(array('message' => 'Error parsing AI response: ' . $e->getMessage()));
        }
    } else {
        error_log('Invalid response format from OpenAI API: ' . $body);
        wp_send_json_error(array('message' => 'Invalid response from AI service'));
    }
}

// *** NEW: Function to handle sending data to Make.com Webhook ***
function handle_send_to_make_webhook() {
    // Security check using the new nonce
    check_ajax_referer('longevity_make_nonce', 'security');
    
    // Get the complete data payload sent from the browser
    $complete_data_json = isset($_POST['complete_data']) ? stripslashes($_POST['complete_data']) : null;
    
    if (!$complete_data_json) {
        wp_send_json_error(array('message' => 'No data received for webhook.'));
        return;
    }
    
    // Decode the JSON data
    $complete_data = json_decode($complete_data_json, true);
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        error_log('Error decoding JSON data for Make webhook: ' . json_last_error_msg());
        wp_send_json_error(array('message' => 'Error decoding data.'));
        return;
    }
    
    // Prepare the payload for Make.com (it should already be in the correct format)
    // We might add minor sanitization here if needed, but assume JS sent it correctly
    $make_payload = $complete_data; 

    // Add function to properly format arrays
    function ensureProperArrayStructure(&$data) {
        // Handle strengths/improvements
        if (isset($data['ai_results']['strengthsAreas'])) {
            if (isset($data['ai_results']['strengthsAreas']['strengths'])) {
                if (is_string($data['ai_results']['strengthsAreas']['strengths'])) {
                    // Convert string to array if needed
                    $data['ai_results']['strengthsAreas']['strengths'] = 
                        [$data['ai_results']['strengthsAreas']['strengths']];
                }
            } else {
                $data['ai_results']['strengthsAreas']['strengths'] = [];
            }
            
            if (isset($data['ai_results']['strengthsAreas']['improvements'])) {
                if (is_string($data['ai_results']['strengthsAreas']['improvements'])) {
                    // Convert string to array if needed
                    $data['ai_results']['strengthsAreas']['improvements'] = 
                        [$data['ai_results']['strengthsAreas']['improvements']];
                }
            } else {
                $data['ai_results']['strengthsAreas']['improvements'] = [];
            }
        }
        
        // Handle recommendations
        if (isset($data['ai_results']['recommendations'])) {
            $rec_sections = ['immediate', 'ongoing', 'consultations'];
            foreach ($rec_sections as $section) {
                if (isset($data['ai_results']['recommendations'][$section])) {
                    if (is_string($data['ai_results']['recommendations'][$section])) {
                        // Convert string to array if needed
                        $data['ai_results']['recommendations'][$section] = 
                            [$data['ai_results']['recommendations'][$section]];
                    }
                } else {
                    $data['ai_results']['recommendations'][$section] = [];
                }
            }
        }
    }

    // Call the function to ensure arrays are properly structured
    ensureProperArrayStructure($make_payload);

    // --- Ensure all required AI fields are present ---
    if (!isset($make_payload['ai_results']) || !is_array($make_payload['ai_results'])) {
        $make_payload['ai_results'] = [];
    }
    $required_ai_fields = [
        'ageAssessment',
        'chronologicalVsBio',
        'agingProcesses',
        'researchAndWisdom',
        'lifespanHealthspan',
        'longevityInfluencesExplanation',
        'ageImpactAnalysis',
        'keyFindings'
    ];
    foreach ($required_ai_fields as $field) {
        if (!array_key_exists($field, $make_payload['ai_results'])) {
            // Add meaningful default content instead of empty string
            switch ($field) {
                case 'ageAssessment':
                    $make_payload['ai_results'][$field] = "Your biological age assessment indicates important patterns in your overall health and wellness. The difference between your chronological and biological age provides valuable insights into how your lifestyle habits are affecting your aging process.";
                    break;
                case 'chronologicalVsBio':
                    $make_payload['ai_results'][$field] = "Your chronological age reflects your years lived, while your biological age indicates how your body is aging at the cellular level. The gap between these ages is influenced by your physical activity, nutrition, sleep quality, and stress management.";
                    break;
                case 'agingProcesses':
                    $make_payload['ai_results'][$field] = "Aging occurs at both cellular and systemic levels. Your daily habits directly impact cellular repair mechanisms, inflammation levels, and metabolic efficiency. Small, consistent lifestyle improvements can significantly affect these fundamental aging processes.";
                    break;
                case 'researchAndWisdom':
                    $make_payload['ai_results'][$field] = "Modern research consistently validates traditional wisdom regarding balanced nutrition, regular movement, quality sleep, and stress management. These timeless principles form the foundation of healthy aging across all cultures and time periods.";
                    break;
                case 'lifespanHealthspan':
                    $make_payload['ai_results'][$field] = "The goal isn't merely extending lifespan but enhancing healthspan—the period of life spent in good health. By addressing key lifestyle factors now, you can increase your active, functional years and reduce time spent in age-related decline.";
                    break;
                case 'longevityInfluencesExplanation':
                    $make_payload['ai_results'][$field] = "The radar chart visualizes your key health metrics, with scores closer to the outer edge representing strengths and those nearer the center indicating areas for improvement. Each metric represents a lifestyle factor that influences your aging process.";
                    break;
                case 'ageImpactAnalysis':
                    $make_payload['ai_results'][$field] = "Your assessment reveals specific factors that directly influence your biological age. Positive factors like " . 
                        (isset($make_payload['positiveFactors'][0]['name']) ? $make_payload['positiveFactors'][0]['name'] : "healthy habits") . 
                        " are helping lower your biological age, while factors like " . 
                        (isset($make_payload['negativeFactors'][0]['name']) ? $make_payload['negativeFactors'][0]['name'] : "lifestyle challenges") . 
                        " may be increasing it. By maintaining your strengths and addressing these specific areas, you can positively impact your aging trajectory.";
                    break;
                
                case 'keyFindings':
                    $make_payload['ai_results'][$field] = "Your assessment reveals key insights about your health and longevity profile. Your biological age of " . 
                        (isset($make_payload['biologicalAge']) ? $make_payload['biologicalAge'] : "N/A") . 
                        " compared to your chronological age of " . 
                        (isset($make_payload['age']) ? $make_payload['age'] : "N/A") . 
                        " indicates areas of strength and opportunity. By focusing on your primary health metrics and addressing specific lifestyle factors, you can optimize your aging trajectory and enhance overall wellbeing.";
                    break;
                default:
                    $make_payload['ai_results'][$field] = "";
            }
        }
    }
    // --- End ensure required AI fields ---
    
    // --- Ensure all required WHR and fallback fields are present ---
    if (!isset($make_payload['whr_min'])) {
        $make_payload['whr_min'] = 0.6;
    }
    if (!isset($make_payload['whr_max'])) {
        $make_payload['whr_max'] = 1.2;
    }
    if (!isset($make_payload['whr_threshold'])) {
        // Default to 0.95 (male) if gender is male, else 0.85 (female), else 0.9
        if (isset($make_payload['gender']) && $make_payload['gender'] === 'male') {
            $make_payload['whr_threshold'] = 0.95;
        } elseif (isset($make_payload['gender']) && $make_payload['gender'] === 'female') {
            $make_payload['whr_threshold'] = 0.85;
        } else {
            $make_payload['whr_threshold'] = 0.9;
        }
    }
    if (!isset($make_payload['whr_range'])) {
        $make_payload['whr_range'] = $make_payload['whr_max'] - $make_payload['whr_min'];
    }
    if (!isset($make_payload['chronologicalAge'])) {
        $make_payload['chronologicalAge'] = isset($make_payload['age']) ? $make_payload['age'] : null;
    }
    if (!isset($make_payload['ageAssessmentText'])) {
        $make_payload['ageAssessmentText'] = "";
    }
    // --- End ensure required WHR and fallback fields ---

    // Define Make.com webhook URL
    $make_webhook_url = 'https://hook.eu2.make.com/rb1qjeq2waa8s7g1pd527j2te8fukovg';
    
    // --- START: Add Chart Configuration Data ---
    $chart_config = [
        'colors' => ["#007B7F", "#27ae60", "#e74c3c", "#f39c12", "#3498db"], // Default theme colors
        'agingRate' => [
            'value' => isset($make_payload['agingRate']) ? floatval($make_payload['agingRate']) : null,
            'minValue' => 0.5,
            'maxValue' => 1.5
        ],
        'bodyComposition' => [
            'bmi' => [
                'value' => isset($make_payload['bmi']) ? floatval($make_payload['bmi']) : null,
                'category' => $make_payload['bmiCategory'] ?? 'N/A',
                'minValue' => 15,
                'maxValue' => 40,
                'colorStops' => [ // Define color stops for BMI ranges
                    ['percent' => (18.5 - 15) / (40 - 15), 'color' => '#2ecc71'], // Healthy start
                    ['percent' => (25.0 - 15) / (40 - 15), 'color' => '#f1c40f'], // Overweight start
                    ['percent' => (30.0 - 15) / (40 - 15), 'color' => '#e67e22'], // Obese start
                    ['percent' => (35.0 - 15) / (40 - 15), 'color' => '#e74c3c'], // High Obese start
                    // Add more stops if needed, ensure percentages are correct
                ]
            ],
            'whr' => [
                'value' => isset($make_payload['whr']) ? floatval($make_payload['whr']) : null,
                'category' => $make_payload['whrCategory'] ?? 'N/A',
                'gender' => $make_payload['gender'] ?? 'other', // Include gender for threshold logic
                'minValue' => 0.6,
                'maxValue' => 1.2,
                'riskThresholdMale' => 0.95,
                'riskThresholdFemale' => 0.85
            ]
        ],
        'detailedScores' => [
            // Ensure scores are numbers
             'scores' => isset($make_payload['scores']) && is_array($make_payload['scores']) 
                        ? array_map('floatval', $make_payload['scores']) 
                        : [],
            'maxValue' => 5
        ]
    ];
    $make_payload['chartConfig'] = $chart_config;
    
    // --- Remove old chart URLs to avoid confusion ---
    unset($make_payload['biological_age_chart_url']);
    unset($make_payload['age_impact_chart_url']);
    unset($make_payload['detailed_scores_chart_url']);
    unset($make_payload['aging_rate_chart_url']);
    unset($make_payload['body_composition_chart_url']);
    // --- END: Add Chart Configuration Data ---

    // Ensure chart URLs are included
    if (!isset($make_payload['biological_age_chart_url']) || empty($make_payload['biological_age_chart_url'])) {
        // Generate a default chart URL or use a placeholder
        $age = isset($make_payload['age']) ? $make_payload['age'] : 0;
        $bioAge = isset($make_payload['biologicalAge']) ? $make_payload['biologicalAge'] : 0;
        $make_payload['biological_age_chart_url'] = 'https://quickchart.io/chart?c=' . 
            urlencode(json_encode([
                'type' => 'bar',
                'data' => [
                    'labels' => ['Chronological Age', 'Biological Age'],
                    'datasets' => [[
                        'label' => 'Age Comparison',
                        'data' => [$age, $bioAge],
                        'backgroundColor' => ['#0077B6', '#00B4D8']
                    ]]
                ]
            ]));
    }

    // Do the same for other missing chart URLs
    $charts = [
        'detailed_scores_chart_url',
        'age_impact_chart_url',
        'aging_rate_chart_url'
    ];

    foreach ($charts as $chart) {
        if (!isset($make_payload[$chart]) || empty($make_payload[$chart])) {
            $make_payload[$chart] = 'https://quickchart.io/chart?c=' . 
                urlencode(json_encode([
                    'type' => 'pie',
                    'data' => [
                        'labels' => ['Placeholder Chart'],
                        'datasets' => [[
                            'data' => [100],
                            'backgroundColor' => ['#0077B6']
                        ]]
                    ]
                ]));
        }
    }

    // Before sending data to Make.com, ensure impact factors are properly structured
    // Check if positiveFactors exists and is a single item when it should be an array
    if (isset($make_payload['positiveFactors']) && !is_array($make_payload['positiveFactors']) && isset($make_payload['positiveFactors']['name'])) {
        // Convert single item to array
        $make_payload['positiveFactors'] = [$make_payload['positiveFactors']];
    }

    // Same for negativeFactors
    if (isset($make_payload['negativeFactors']) && !is_array($make_payload['negativeFactors']) && isset($make_payload['negativeFactors']['name'])) {
        // Convert single item to array
        $make_payload['negativeFactors'] = [$make_payload['negativeFactors']];
    }

    // Ensure at least one item exists in each array
    if (!isset($make_payload['positiveFactors']) || empty($make_payload['positiveFactors'])) {
        $make_payload['positiveFactors'] = [
            ['name' => 'Healthy Lifestyle Habits', 'impact' => -1.0, 'description' => 'Your overall health practices contribute to longevity.']
        ];
    }

    if (!isset($make_payload['negativeFactors']) || empty($make_payload['negativeFactors'])) {
        $make_payload['negativeFactors'] = [
            ['name' => 'Lifestyle Challenges', 'impact' => 1.0, 'description' => 'Areas that may be impacting your health trajectory.']
        ];
    }

    // Add debug log
    error_log('Impact factors being sent: Positive=' . count($make_payload['positiveFactors']) . ', Negative=' . count($make_payload['negativeFactors']));

    // Log the full payload for debugging
    error_log('Complete Make.com payload: ' . json_encode($make_payload));

    // Send the COMPLETE data payload asynchronously to Make.com
    $webhook_response = wp_remote_post($make_webhook_url, array(
        'method' => 'POST',
        'headers' => array('Content-Type' => 'application/json; charset=utf-8'),
        'body' => json_encode($make_payload), // Re-encode the validated data
        'blocking' => false, // Keep it non-blocking
        'data_format' => 'body',
        'timeout' => 15 // Shorter timeout for non-blocking webhook call
    ));
    
    // Check for errors during the webhook call
    if (is_wp_error($webhook_response)) {
        $error_message = $webhook_response->get_error_message();
        error_log('Make.com webhook request failed: ' . $error_message);
        wp_send_json_error(array('message' => 'Failed to send data to processing service: ' . $error_message));
    } else {
        $response_code = wp_remote_retrieve_response_code($webhook_response);
        if ($response_code >= 400) { // Check for HTTP errors from Make.com
             error_log('Make.com webhook returned error code: ' . $response_code);
             wp_send_json_error(array('message' => 'Processing service returned an error (Code: ' . $response_code . ').'));
        } else {
            error_log('Complete longevity form data sent successfully to Make.com webhook via button click.'); 
            wp_send_json_success(array('message' => 'Report generation request sent successfully!'));
        }
    }
    
    // Ensure WordPress exits gracefully after handling the AJAX request
    wp_die(); 
}
// *** END NEW Function ***

// Register shortcode
function longevity_assessment_form() {
    // Ensure jQuery is loaded
    wp_enqueue_script('jquery');
    
    // Include Chart.js library
    wp_enqueue_script('chart-js', 'https://cdn.jsdelivr.net/npm/chart.js', array('jquery'), null, true);
    
    // Include Chart.js Annotation plugin
    wp_enqueue_script('chart-js-annotation', 'https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation', array('chart-js'), null, true);
    
    // *** NEW: Include ZingChart library ***
    wp_enqueue_script('zingchart', 'https://cdn.zingchart.com/zingchart.min.js', array(), null, true);
    
    // Register our form's JavaScript inline
    $inline_script = "var longevity_form_data = " . json_encode(array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('longevity_form_nonce'),
        'make_nonce' => wp_create_nonce('longevity_make_nonce') // *** ADDED new nonce ***
    )) . ";";
    
    // Print the inline script directly
    echo '<script>' . $inline_script . '</script>';

    ob_start();
    ?>
    <!-- Form Container -->
    <div class="longevity-form-container">
        <!-- Google Material Icons for factor icons -->
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        
        <!-- Welcome Text -->
        <div style="margin-bottom: 3rem; padding: 0 1rem; color: #1d1d1f;">
            <h3 style="font-size: 1.75rem; font-weight: 600; letter-spacing: -0.02em; margin-bottom: 1.5rem;">Longevity & Health Report</h3>
            <p style="font-size: 1.05rem; line-height: 1.55; color: #3c3c43; margin-bottom: 2.5rem;">Welcome to your exclusive gateway to realising your full potential and embracing a life of balance and vitality.<br>We're delighted that you're prioritising your well-being. Health is not merely the absence of symptoms but a vibrant dialogue between body and mind. This premium report offers bespoke insights into your biological age, lifestyle strengths, and areas that might benefit from a little extra care. Each metric is a stepping stone on your journey towards a more resilient and fulfilling life.</p>
            <hr style="border: none; border-top: 1px solid #e5e5e5; margin: 2.5rem 0;">

            <h4 style="font-size: 1.2rem; font-weight: 600; letter-spacing: -0.015em; margin-top: 2.5rem; margin-bottom: 1rem;">Our Approach</h4>
            <p style="font-size: 1rem; line-height: 1.55; color: #3c3c43; margin-bottom: 2.5rem;">Crafted with the expertise of seasoned professionals—much like a trusted sherpa guiding you up a majestic mountain—this report is designed for both dedicated health enthusiasts and those just beginning their journey. When you combine these personalised insights with the guidance of an experienced practitioner, you are equipped to overcome obstacles and tackle life's challenges with confidence.</p>
            <hr style="border: none; border-top: 1px solid #e5e5e5; margin: 2.5rem 0;">

            <h4 style="font-size: 1.2rem; font-weight: 600; letter-spacing: -0.015em; margin-top: 2.5rem; margin-bottom: 1rem;">Important Reminder</h4>
            <p style="font-size: 1rem; line-height: 1.55; color: #3c3c43; margin-bottom: 2.5rem;">While this report is a powerful tool for self-discovery, it is not a replacement for consulting a qualified health professional, especially if you have a health concern or issue. Your body possesses remarkable abilities to heal and recover, but even minor symptoms can sometimes signal something more serious. It is important to have any health concerns evaluated to rule out potential issues, allowing you to focus on enhancing your health and fitness with peace of mind.</p>
            <hr style="border: none; border-top: 1px solid #e5e5e5; margin: 2.5rem 0;">

            <h4 style="font-size: 1.2rem; font-weight: 600; letter-spacing: -0.015em; margin-top: 2.5rem; margin-bottom: 1rem;">Your Journey Ahead</h4>
            <p style="font-size: 1rem; line-height: 1.55; color: #3c3c43; margin-bottom: 3rem;">Embrace the adventure ahead with assurance, knowing that every small, mindful adjustment brings you closer to optimal health and a life well-lived. Whether you're a seasoned health enthusiast or at the beginning of your journey, remember: every step is progress.</p>

            <p style="font-size: 0.9rem; line-height: 1.5; color: #86868b; margin-top: 3rem; border-top: 1px solid #e5e5e5; padding-top: 1.5rem;"><i>Brought to you by HealthDataLab – empowering both the general public and health professionals to achieve excellence in health and well-being.</i></p>
        </div>

        <!-- Form Sections -->
        <form id="longevityForm" class="longevity-form">
            <!-- Section 1: Personal Information -->
            <div class="form-section" id="section1">
                <h2>Personal Information</h2>
                <div class="form-group">
                    <label for="fullName">Full Name <span class="info-icon"><span class="tooltip">Please enter your full legal name as it appears on official documents.</span></span></label>
                    <input type="text" id="fullName" name="fullName">
                </div>
                <div class="form-group">
                    <label for="gender">Gender <span class="info-icon"><span class="tooltip">This information helps us provide more accurate health assessments and recommendations.</span></span></label>
                    <select id="gender" name="gender">
                        <option value="">Select Gender</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="email">Email Address <span class="info-icon"><span class="tooltip">We'll send your assessment results and recommendations to this email address.</span></span></label>
                    <input type="email" id="email" name="email">
                </div>
                <div class="form-group">
                    <label for="practitionerEmail">Practitioner's Email <span class="info-icon"><span class="tooltip">If applicable, enter the email address of your health practitioner to share the results.</span></span></label>
                    <input type="email" id="practitionerEmail" name="practitionerEmail">
                </div>
                <div class="form-group">
                    <label for="age">Age <span class="info-icon"><span class="tooltip">Enter your current age in years.</span></span></label>
                    <input type="number" id="age" name="age" min="18" max="120">
                </div>
                <!-- New Text Fields -->
                <div class="form-group">
                    <label for="healthChallenges">What are your main health challenges? <span class="info-icon"><span class="tooltip">Briefly describe the primary health concerns or symptoms you are currently experiencing.</span></span></label>
                    <textarea id="healthChallenges" name="healthChallenges" rows="4" style="resize: vertical;"></textarea>
                </div>
                <div class="form-group">
                    <label for="healthGoals">What changes/shift are you hoping to see with your health? (In the short term and long term) <span class="info-icon"><span class="tooltip">Describe the improvements or outcomes you desire for your health, both immediate and future aspirations.</span></span></label>
                    <textarea id="healthGoals" name="healthGoals" rows="4" style="resize: vertical;"></textarea>
                </div>
                <!-- Disclaimer Checkbox -->
                <div class="form-group" style="display: flex; align-items: center; margin-top: 2rem;">
                    <input type="checkbox" id="termsAgree" name="termsAgree" required style="width: auto; height: 20px; margin-right: 12px; flex-shrink: 0; accent-color: #007AFF;">
                    <label for="termsAgree" style="margin-bottom: 0; font-weight: 400; font-size: 0.9rem; color: #555;">I have read and agree to the <a href="https://www.healthdatalab.com/formsprivacytermsconditions" target="_blank" style="color: #007AFF; text-decoration: none;">Terms & Conditions</a> / NB: If you don't agree to these terms and conditions, you're unauthorised to use this tool.</label>
                </div>
            </div>

            <!-- Section 2: Body Measurements -->
            <div class="form-section" id="section2">
                <h2>Body Measurements</h2>
                <div class="form-group">
                    <label for="height">Height (cm) <span class="info-icon"><span class="tooltip">Measure your height in centimeters. Stand straight against a wall with your heels together.</span></span></label>
                    <input type="number" id="height" name="height">
                </div>
                <div class="form-group">
                    <label for="weight">Weight (kg) <span class="info-icon"><span class="tooltip">Enter your current weight in kilograms. Use a digital scale for accuracy.</span></span></label>
                    <input type="number" id="weight" name="weight">
                </div>
                <div class="form-group">
                    <label for="waist">Waist Circumference (cm) <span class="info-icon"><span class="tooltip">Measure around your waist at the level of your belly button. Keep the tape measure horizontal.</span></span></label>
                    <input type="number" id="waist" name="waist">
                </div>
                <div class="form-group">
                    <label for="hip">Hip Circumference (cm) <span class="info-icon"><span class="tooltip">Measure around the widest part of your hips. Keep the tape measure horizontal.</span></span></label>
                    <input type="number" id="hip" name="hip">
                </div>
                <div class="form-group">
                    <label for="overallHealthPercent">Overall Health Percentage (%) <span class="info-icon"><span class="tooltip">If you have completed a separate health assessment that provided an overall health score (as a percentage), please enter that score here.</span></span></label>
                    <input type="number" id="overallHealthPercent" name="overallHealthPercent" min="0" max="100" step="1">
                </div>
            </div>

            <!-- Section 3: Lifestyle Factors -->
            <div class="form-section" id="section3">
                <h2>Lifestyle Factors</h2>
                <div class="form-group">
                    <label for="activity">Physical Activity Level <span class="info-icon"><span class="tooltip">Select the option that best describes your typical weekly physical activity. Consider the type, frequency and intensity of your exercise and daily movement.</span></span></label>
                    <select id="activity" name="activity">
                        <option value="">Select Activity Level</option>
                        <option value="0">Sedentary (minimal activity)</option>
                        <option value="1">Very low (occasional walking)</option>
                        <option value="2">Low (regular walking or light activity)</option>
                        <option value="3">Moderate (regular moderate exercise)</option>
                        <option value="4">High (structured exercise 3+ times/week)</option>
                        <option value="5">Very high (intense training 4+ times/week)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="sleepDuration">Sleep Duration <span class="info-icon"><span class="tooltip">Choose the sleep duration that most closely matches your average nightly sleep over the past month. Base your answer on a typical night rather than an occasional variation.</span></span></label>
                    <select id="sleepDuration" name="sleepDuration">
                        <option value="">Select Sleep Duration</option>
                        <option value="0">Less than 4 hours (severely insufficient)</option>
                        <option value="1">4–5 hours (very short sleep)</option>
                        <option value="2">5–6 hours (short sleep)</option>
                        <option value="3">6–7 hours (slightly below average)</option>
                        <option value="4">7–8 hours (recommended duration)</option>
                        <option value="5">More than 8 hours (extended sleep)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="sleepQuality">Sleep Quality <span class="info-icon"><span class="tooltip">Rate how frequently you experience restful, uninterrupted sleep. Consider factors such as feeling refreshed in the morning and the number of awakenings during the night.</span></span></label>
                    <select id="sleepQuality" name="sleepQuality">
                        <option value="">Select Sleep Quality</option>
                        <option value="0">Never (I never sleep well)</option>
                        <option value="1">Rarely (seldom restful sleep)</option>
                        <option value="2">Occasionally (inconsistent quality)</option>
                        <option value="3">Sometimes (moderate quality sleep)</option>
                        <option value="4">Often (mostly restful sleep)</option>
                        <option value="5">Always (consistently high quality sleep)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stressLevels">Stress Levels <span class="info-icon"><span class="tooltip">Indicate how often you feel stressed or overwhelmed. Reflect on both work and personal life to determine your usual stress level.</span></span></label>
                    <select id="stressLevels" name="stressLevels">
                        <option value="">Select Stress Level</option>
                        <option value="0">Constantly stressed (high anxiety, unrelenting)</option>
                        <option value="1">Very high stress (frequent overwhelming stress)</option>
                        <option value="2">Moderate stress (often challenging to manage)</option>
                        <option value="3">Sometimes stressed (occasional stress episodes)</option>
                        <option value="4">Low stress (generally calm)</option>
                        <option value="5">Rarely stressed (minimal stress, very relaxed)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="socialConnections">Social Connections <span class="info-icon"><span class="tooltip">Select the option that best represents the frequency of your social interactions, including contact with friends, family and community groups.</span></span></label>
                    <select id="socialConnections" name="socialConnections">
                        <option value="">Select Social Connection Level</option>
                        <option value="0">None (no regular social interaction)</option>
                        <option value="1">Rarely (infrequent social contact)</option>
                        <option value="2">Occasionally (sporadic interaction with friends/family)</option>
                        <option value="3">Regularly (consistent weekly social contact)</option>
                        <option value="4">Often (frequent social engagement)</option>
                        <option value="5">Daily (social interactions every day)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="dietQuality">Diet Quality <span class="info-icon"><span class="tooltip">Select the option that best describes the overall quality of your regular diet. Think about the variety, nutrient density and frequency of processed foods in your meals.</span></span></label>
                    <select id="dietQuality" name="dietQuality">
                        <option value="">Select Diet Quality</option>
                        <option value="0">Very poor (nutrient deficient, unhealthy choices)</option>
                        <option value="1">Poor (limited variety, low nutrient density)</option>
                        <option value="2">Below average (occasional healthy meals, frequent unhealthy choices)</option>
                        <option value="3">Average (balanced diet with some healthy choices)</option>
                        <option value="4">Good (mostly nutritious and balanced)</option>
                        <option value="5">Excellent (high nutrient density, varied and balanced)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="alcoholConsumption">Alcohol Consumption <span class="info-icon"><span class="tooltip">Select your average weekly alcohol consumption. Base your answer on standard drink sizes as defined in your region.</span></span></label>
                    <select id="alcoholConsumption" name="alcoholConsumption">
                        <option value="">Select Alcohol Consumption</option>
                        <option value="0">15+ drinks per week (heavy drinking)</option>
                        <option value="1">10-14 drinks per week (frequent heavy drinking)</option>
                        <option value="2">6-9 drinks per week (moderate consumption)</option>
                        <option value="3">3-5 drinks per week (light to moderate consumption)</option>
                        <option value="4">1-2 drinks per week (occasional drinking)</option>
                        <option value="5">0 drinks (abstainer)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="smokingStatus">Smoking Status <span class="info-icon"><span class="tooltip">Choose the option that best describes your current or past smoking habits. Consider both the frequency and recency of your smoking behaviour.</span></span></label>
                    <select id="smokingStatus" name="smokingStatus">
                        <option value="">Select Smoking Status</option>
                        <option value="0">Current daily smoker (smokes every day)</option>
                        <option value="1">Regular smoker (smokes on most days)</option>
                        <option value="2">Occasional smoker (smokes infrequently)</option>
                        <option value="3">Recently quit (stopped smoking within the last 6 months)</option>
                        <option value="4">Former smoker (quit more than 6 months ago)</option>
                        <option value="5">Never smoked (no history of smoking)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="cognitiveActivity">Cognitive Activity <span class="info-icon"><span class="tooltip">Select how often you engage in activities that challenge your brain. This can include puzzles, reading, learning new skills or other mentally stimulating tasks.</span></span></label>
                    <select id="cognitiveActivity" name="cognitiveActivity">
                        <option value="">Select Cognitive Activity Level</option>
                        <option value="0">Never (no cognitive activities, e.g. puzzles or reading)</option>
                        <option value="1">Rarely (infrequent mental stimulation)</option>
                        <option value="2">Occasionally (sporadic cognitive activities)</option>
                        <option value="3">Regularly (weekly engagement in brain-stimulating tasks)</option>
                        <option value="4">Frequently (almost daily mental stimulation)</option>
                        <option value="5">Daily (consistent daily mental exercises such as puzzles or reading)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="sunlightExposure">Sunlight Exposure <span class="info-icon"><span class="tooltip">Choose the duration of natural sunlight you typically receive daily. Consider exposure during morning or afternoon hours, not just while indoors.</span></span></label>
                    <select id="sunlightExposure" name="sunlightExposure">
                        <option value="">Select Sunlight Exposure</option>
                        <option value="0">Less than 10 minutes (minimal exposure)</option>
                        <option value="1">10-20 minutes (brief exposure)</option>
                        <option value="2">20-30 minutes (short daily exposure)</option>
                        <option value="3">30-60 minutes (moderate daily exposure)</option>
                        <option value="4">1-2 hours (extended daily exposure)</option>
                        <option value="5">More than 2 hours (high exposure)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="supplementIntake">Supplement Intake <span class="info-icon"><span class="tooltip">Indicate how often you take dietary supplements such as vitamins or minerals. Reflect on your routine over the past month.</span></span></label>
                    <select id="supplementIntake" name="supplementIntake">
                        <option value="">Select Supplement Intake</option>
                        <option value="0">None (no supplements)</option>
                        <option value="1">Rarely (less than once per week)</option>
                        <option value="2">Occasionally (1-2 times per week)</option>
                        <option value="3">Regularly (3-4 times per week)</option>
                        <option value="4">Frequently (5-6 times per week)</option>
                        <option value="5">Daily (every day)</option>
                    </select>
                </div>
            </div>

            <!-- Section 4: Physical Performance Metrics -->
            <div class="form-section" id="section4">
                <h2>Physical Performance Metrics</h2>
                <div class="form-group">
                    <label for="sitStand">Sit-to-Stand Test <span class="info-icon"><span class="tooltip">Record the number of complete sit-to-stand repetitions you can perform in 30 seconds using a standard chair. Ensure you count only full, proper repetitions.</span></span></label>
                    <select id="sitStand" name="sitStand">
                        <option value="">Select Capability Level</option>
                        <option value="0">0 points (unable to perform any stand-ups)</option>
                        <option value="1">1-2 points (minimal performance)</option>
                        <option value="2">3-5 points (below average performance)</option>
                        <option value="3">6-7 points (average performance)</option>
                        <option value="4">8-9 points (above average performance)</option>
                        <option value="5">10 points (excellent performance)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="breathHold">Breath Hold Test <span class="info-icon"><span class="tooltip">Measure the time (in seconds) you can hold your breath after a normal exhalation. Use a stopwatch and take your best, safe attempt.</span></span></label>
                    <select id="breathHold" name="breathHold">
                        <option value="">Select Breath Hold Duration</option>
                        <option value="0">Less than 15 seconds (very short duration)</option>
                        <option value="1">15-29 seconds (short duration)</option>
                        <option value="2">30-45 seconds (moderate duration)</option>
                        <option value="3">46-60 seconds (good duration)</option>
                        <option value="4">61-90 seconds (long duration)</option>
                        <option value="5">More than 90 seconds (very long duration)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="balance">Balance Test <span class="info-icon"><span class="tooltip">Record how long (in seconds) you can maintain balance on one leg without support. Use a stopwatch and repeat if needed to confirm your best time.</span></span></label>
                    <select id="balance" name="balance">
                        <option value="">Select Balance Level</option>
                        <option value="0">Less than 10 seconds (poor balance)</option>
                        <option value="1">10-19 seconds (below average balance)</option>
                        <option value="2">20-29 seconds (moderate balance)</option>
                        <option value="3">30-39 seconds (good balance)</option>
                        <option value="4">40-59 seconds (very good balance)</option>
                        <option value="5">More than 60 seconds (excellent balance)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="skinElasticity">Skin Elasticity <span class="info-icon"><span class="tooltip">After gently pinching and releasing your skin (e.g. on the back of your hand), record the time in seconds it takes to return to normal. Use a stopwatch for accuracy.</span></span></label>
                    <select id="skinElasticity" name="skinElasticity">
                        <option value="">Select Skin Elasticity Level</option>
                        <option value="0">More than 30 seconds (very low elasticity)</option>
                        <option value="1">16-30 seconds (low elasticity)</option>
                        <option value="2">10-15 seconds (below average elasticity)</option>
                        <option value="3">5-9 seconds (moderate elasticity)</option>
                        <option value="4">3-4 seconds (good elasticity)</option>
                        <option value="5">1-2 seconds (excellent elasticity)</option>
                    </select>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="form-navigation">
                <button type="submit" class="nav-btn submit-btn">Calculate Results</button>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" style="display: none;">
                <h2>Your Longevity Assessment Results</h2>
                <!-- Optional: Add subtitle for date here later -->
                <div class="results-container">
                    <!-- Row 1: Biological Age and Lifestyle Score -->
                    <div class="result-card" id="bioAgeCard">
                         <h3>Biological Age</h3>
                         <!-- Populated by JS: Shows Biological Age and Age Shift -->
                         <div id="biologicalAgeDisplay"></div>
                    </div>
                    <div class="result-card" id="lifestyleScoreCard">
                        <h3>Lifestyle Score</h3>
                        <!-- Populated by JS: Shows overall average score -->
                        <div id="lifestyleScore"></div> <!-- Existing content div -->
                    </div>

                    <!-- Row 2: Aging Rate - REPLACED WITH ZINGCHART -->
                    <div class="result-card full-width-card" id="agingRateCard">
                        <h3>Aging Rate</h3>
                         <!-- ZingChart will display the value and interpretation -->
                         <!-- *** NEW: Container for ZingChart Gauge *** -->
                         <div id="zingChartAgingRateGaugeContainer" style="width:100%; min-height:300px;"></div>
                         <!-- *** REMOVED old agingRateDisplay and SVG wrapper *** -->
                    </div>

                    <!-- Section: Body Measurements (Full Width) -->
                     <div class="full-width-section" id="bodyMeasurementsSection">
                         <h3>Body Composition Analysis</h3>
                         <!-- Populated by JS: Shows BMI/WHR gauges -->
                         <div id="bodyMeasurements"></div> <!-- Existing content div -->
                     </div>

                     <!-- Section: Detailed Breakdown (Full Width) - MOVED HERE -->
                     <div class="full-width-section" id="detailedBreakdownSection">
                         <h3>Detailed Breakdown</h3>
                         <!-- Populated by JS: Shows scores for each metric -->
                         <div id="detailedBreakdown"></div> <!-- Existing content div -->
                     </div>

                     <!-- --- Age Impact Factors Section --- -->
                     <div class="full-width-section" id="ageImpactSection">
                         <h3>Age Impact Factors</h3>
                         <div class="impact-factors-container">
                             <div class="impact-column">
                                 <div class="impact-column-header">
                                     <div class="icon impact-positive">
                                         <span class="material-icons">trending_down</span>
                                     </div>
                                     <h4>Factors Lowering Your Age</h4>
                                 </div>
                                 <!-- Positive factors will be populated by JS -->
                             </div>
                             <div class="impact-column">
                                 <div class="impact-column-header">
                                     <div class="icon impact-negative">
                                         <span class="material-icons">trending_up</span>
                                     </div>
                                     <h4>Factors Raising Your Age</h4>
                                 </div>
                                 <!-- Negative factors will be populated by JS -->
                             </div>
                         </div>
                     </div>
                     <!-- --- End Age Impact Factors Section --- -->

                     <!-- --- AI Analysis Section --- -->
                     <div class="full-width-section" id="aiAnalysisSection">
                         <h3>AI Personalized Analysis</h3>
                         <div class="ai-analysis-container">
                             <div class="ai-status">
                                 <div class="ai-loading">
                                     <span class="material-icons ai-loading-icon">autorenew</span>
                                     <p>Analyzing your data...</p>
                                 </div>
                             </div>
                             <div class="ai-content" style="display: none;">
                                 <div class="ai-header">
                                     <span class="material-icons ai-icon">psychology</span>
                                     <div class="ai-branding">
                                         <h4>AI Health Insights</h4>
                                         <p class="ai-subtitle">Personalized analysis based on your assessment</p>
                                     </div>
                                 </div>
                                 <div class="ai-sections">
                                     <div class="ai-section">
                                         <h5>Summary</h5>
                                         <div class="ai-summary"></div>
                                     </div>
                                     <div class="ai-columns">
                                         <div class="ai-column">
                                             <h5>Key Strengths</h5>
                                             <div class="ai-strengths"></div>
                                         </div>
                                         <div class="ai-column">
                                             <h5>Priority Areas</h5>
                                             <div class="ai-priorities"></div>
                                         </div>
                                     </div>
                                     <div class="ai-section">
                                         <h5>Personalized Recommendations</h5>
                                         <div class="ai-recommendations"></div>
                                     </div>
                                 </div>
                             </div>
                         </div>
                     </div>
                     <!-- --- End AI Analysis Section --- -->

                     <!-- *** NEW: Placeholder for Generate Report Button *** -->
                     <div class="full-width-section" id="generateReportContainer" style="text-align: center; margin-top: 2rem; padding: 1rem 0;">
                         <!-- Button will be injected here by JavaScript -->
                     </div>
                     <!-- *** END NEW Placeholder *** -->

                 </div>
             </div>
        </form>
    </div>

    <style>
        /* Premium Form Styling following Apple Design Guidelines */
        .longevity-form-container {
            max-width: 800px;
            margin: 3rem auto; /* Adjusted margin for slightly more space top/bottom */
            padding: 2.5rem 2rem; /* Adjusted padding */
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            color: #1d1d1f;
            border: 1px solid #e5e5e5;
            border-radius: 16px;
            background-color: #fdfdfd; /* Slightly off-white background */
        }

        /* Form Sections */
        .form-section {
            padding: 2.5rem;
            margin-bottom: 2rem; /* Consistent bottom margin for sections */
            border-radius: 16px;
            /* Removed background/border from individual sections for a cleaner look within the main container */
        }

        .form-section h2 {
            color: #1d1d1f;
            margin-bottom: 2.5rem; /* Increased space below section titles */
            font-size: 1.75rem;
            font-weight: 600;
            letter-spacing: -0.02em;
            text-align: left; /* Ensure alignment */
        }

        .form-group {
            margin-bottom: 1.75rem; /* Slightly adjusted spacing between form fields */
            position: relative; /* Keep for tooltip positioning */
        }

        label {
            display: block;
            margin-bottom: 0.75rem; /* Consistent space below label */
            font-weight: 500;
            color: #1d1d1f;
            font-size: 1rem; /* Meets 11pt minimum */
            letter-spacing: -0.01em;
        }

        /* Apply consistent styling to input, select, and textarea */
        input, select, textarea {
            width: 100%;
            padding: 14px 16px;
            border: 1px solid #d1d1d6; /* Slightly softer border color */
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.2s ease;
            background-color: #ffffff;
            color: #1d1d1f;
            min-height: 44px; /* Apple's minimum touch target size */
            box-sizing: border-box; /* Ensure padding doesn't increase size */
            font-family: inherit; /* Ensure consistent font */
            line-height: 1.4; /* Ensure consistent line height */
        }

        /* Remove redundant/separate textarea styling */
        /* textarea { ... } */

        /* Apply consistent focus styles */
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #007AFF;
            box-shadow: 0 0 0 3px rgba(0,122,255,0.15); /* Adjusted focus shadow */
        }

        /* Remove redundant/separate textarea:focus styling */
        /* textarea:focus { ... } */

        select {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%238e8e93' stroke-width='2.5' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e"); /* Subtler chevron color */
            background-repeat: no-repeat;
            background-position: right 16px center;
            background-size: 16px;
            padding-right: 44px;
        }

        /* Submit Button */
        .form-navigation {
            display: flex;
            justify-content: center;
            margin-top: 3rem;
            padding-top: 1rem; /* Add some space above the button */
        }

        .submit-btn {
            padding: 16px 32px; /* Slightly adjusted padding */
            border-radius: 12px;
            border: none;
            font-size: 1.05rem; /* Adjusted font size */
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            background: #007AFF;
            color: white;
            min-width: 220px; /* Adjusted min-width */
            min-height: 44px; /* Apple's minimum touch target size */
            letter-spacing: -0.01em;
        }

        .submit-btn:hover {
            background: #0056b3;
            transform: translateY(-1px);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

        /* Results Section */
        .results-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Fallback */
            grid-template-columns: repeat(2, 1fr); /* Two columns */
            gap: 2rem;
        }

        .result-card {
            padding: 2rem;
            border: 1px solid #e5e5e5;
            border-radius: 16px;
        }

        .result-card h3 {
            color: #1d1d1f;
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
            font-weight: 600;
            letter-spacing: -0.02em;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .longevity-form-container {
                padding: 2rem 1rem;
            }

            .form-section {
                padding: 2rem;
            }

            .form-section h2 {
                font-size: 1.5rem;
                margin-bottom: 1.5rem;
            }

            .submit-btn {
                width: 100%;
                padding: 16px 24px;
            }

            .form-group {
                margin-bottom: 1.5rem;
            }
        }

        /* Form Validation Styles */
        input:invalid, select:invalid {
            border-color: #e5e5e5;
        }

        input:invalid:focus, select:invalid:focus {
            box-shadow: 0 0 0 4px rgba(0,122,255,0.1);
        }

        /* Loading State */
        .submit-btn.loading {
            opacity: 0.7;
            cursor: not-allowed;
        }

        /* Info Icon and Tooltip Styles */
        .form-group {
            position: relative;
        }

        .info-icon {
            display: inline-block;
            width: 16px;
            height: 16px;
            margin-left: 8px;
            vertical-align: middle;
            cursor: help;
            position: relative;
        }

        .info-icon::before {
            content: "i";
            display: flex;
            align-items: center;
            justify-content: center;
            width: 16px;
            height: 16px;
            background: #007AFF;
            color: white;
            border-radius: 50%;
            font-size: 12px;
            font-weight: bold;
        }

        .tooltip {
            visibility: hidden;
            position: absolute;
            left: 100%;
            top: 50%;
            transform: translateY(-50%) translateX(12px); /* Adjusted transform for spacing */
            background: rgba(29, 29, 31, 0.95); /* Slightly transparent dark background */
            color: white;
            padding: 10px 14px; /* Adjusted padding */
            border-radius: 8px;
            font-size: 0.875rem; /* Ensure this meets ~11pt legibility */
            line-height: 1.4; /* Improved line spacing */
            width: 240px;
            z-index: 100;
            opacity: 0;
            transition: opacity 0.2s ease, transform 0.2s ease;
            margin-left: 0; /* Removed margin, using transform now */
            box-shadow: 0 4px 12px rgba(0,0,0,0.15); /* Slightly stronger shadow */
            pointer-events: none; /* Prevent tooltip from blocking interaction */
        }

        .info-icon:hover .tooltip {
            visibility: visible;
            opacity: 1;
            transform: translateY(-50%) translateX(16px); /* Move slightly further on hover */
        }

        .tooltip::before {
            content: "";
            position: absolute;
            left: -5px; /* Adjusted arrow position */
            top: 50%;
            transform: translateY(-50%);
            border-width: 6px 6px 6px 0;
            border-style: solid;
            border-color: transparent rgba(29, 29, 31, 0.95) transparent transparent; /* Match background */
        }

        @media (max-width: 768px) {
            .tooltip {
                left: 0;
                top: calc(100% + 8px); /* Position below the icon with margin */
                transform: translateX(0); /* Reset horizontal transform */
                margin-left: 0;
                margin-top: 0; /* Reset margin-top */
                width: calc(100% - 10px); /* Adjust width for small screens */
                transform: translateX(5px); /* Center slightly */
            }

            .info-icon:hover .tooltip {
                 transform: translateX(5px); /* Keep transform consistent on hover */
            }

            .tooltip::before {
                left: 20px;
                top: -6px;
                transform: translateX(0); /* Reset transform */
                border-width: 0 6px 6px 6px;
                border-color: transparent transparent rgba(29, 29, 31, 0.95) transparent; /* Match background */
            }
        }

        /* Style for full-width items in the grid */
        .full-width-card,
        .full-width-section {
            grid-column: 1 / -1; /* Span full width */
        }

        /* Specific styling for full-width sections (non-cards) */
        .full-width-section {
             padding: 2rem 0; /* Adjust padding as needed, remove card styles */
             border: none;
             border-radius: 0;
             background: none;
             box-shadow: none;
        }
         .full-width-section h3 {
             /* Style title similar to card titles but maybe centered or different border */
             color: #1d1d1f;
             margin-bottom: 2rem; /* Increased space below title */
             font-size: 1.35rem; /* Adjusted size */
             font-weight: 600;
             letter-spacing: -0.02em;
             text-align: center; /* Center title like Image 1 */
             border-bottom: 1px solid #e5e5e5; /* Add a separator */
             padding-bottom: 1rem;
         }
         .full-width-section h3::before {
             display: none; /* Remove the blue line from card titles */
             background: #007AFF;
             border-radius: 2px;
         }

        /* Results Section Styling - Updated with Apple Design Guidelines */
        #resultsSection {
            margin-top: 4rem;
            padding: 2.5rem;
            background-color: transparent; /* Remove background */
            border: none; /* Remove border from main container */
            border-radius: 0; /* Remove border radius */
        }

        #resultsSection h2 {
            color: #1d1d1f;
            margin-bottom: 3rem; /* Increased spacing */
            font-size: 2rem; /* Slightly larger */
            font-weight: 600;
            letter-spacing: -0.02em;
            text-align: center;
        }

        /* Grid layout for results */
        .results-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            grid-template-columns: repeat(2, 1fr); /* Two columns */
            gap: 2.5rem; /* Increased spacing between items */
        }

        /* Card styling - minimalist approach */
        .result-card {
            background: transparent; /* Remove background */
            border: none; /* Remove border */
            border-radius: 0; /* Remove border radius */
            padding: 0; /* Remove padding */
            box-shadow: none; /* Remove shadow */
            transition: none; /* Remove hover effect */
        }

        .result-card:hover {
            transform: none; /* Remove hover effect */
        }

        .result-card h3 {
            color: #1d1d1f;
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
            font-weight: 600;
            letter-spacing: -0.02em;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e5e5e5; /* Subtle separator line */
        }

        /* Remove blue line before headings */
        .result-card h3::before {
            display: none;
        }

        /* Full-width card styling */
        .full-width-card {
            grid-column: 1 / -1; /* Span all columns */
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;
        }

        /* Full-width section styling - minimalist approach */
        .full-width-section {
            grid-column: 1 / -1; /* Span all columns */
            margin: 3rem 0; /* Increased spacing between sections */
            padding: 0; /* Remove padding */
            background: transparent; /* Remove background */
            border: none; /* Remove border */
            border-radius: 0; /* Remove border radius */
            box-shadow: none; /* Remove shadow */
        }

        .full-width-section h3 {
            color: #1d1d1f;
            padding-bottom: 0.75rem;
            margin-bottom: 2rem;
            font-size: 1.25rem;
            font-weight: 600;
            border-bottom: 1px solid #e5e5e5; /* Subtle separator line */
            position: relative;
        }

        /* Remove decorative element from section titles */
        .full-width-section h3:after {
            display: none;
        }

        /* Age Impact Section - streamlined */
        #ageImpactSection {
            background: transparent; /* Remove background */
            border: none; /* Remove border */
            box-shadow: none; /* Remove shadow */
            padding: 0; /* Remove padding */
            margin: 3rem 0; /* Consistent spacing */
        }

        #ageImpactSection h3 {
            text-align: left; /* Left-aligned title, consistent with other sections */
            margin-bottom: 2rem;
        }

        /* Impact Columns - streamlined */
        .impact-factors-container {
            display: flex;
            flex-direction: column; /* Convert from grid to vertical column */
            gap: 24px; /* Apple-recommended spacing between sections */
            margin-top: 1.5rem;
        }

        /* Restore background colors for impact columns while keeping the professional look */
        .impact-column {
            position: relative;
            padding: 16px;
            border-radius: 12px;
            margin-bottom: 8px;
        }

        .impact-column:first-child {
            background-color: rgba(39, 174, 96, 0.08); /* Light Green */
            border-left: 3px solid rgba(39, 174, 96, 0.2);
            padding-left: 16px;
        }

        .impact-column:last-child {
            background-color: rgba(231, 76, 60, 0.08); /* Light Red */
            border-left: 3px solid rgba(231, 76, 60, 0.2);
            padding-left: 16px;
        }

        .impact-column:hover {
            transform: none; /* Remove hover effect */
            box-shadow: none; /* Remove hover shadow */
        }

        /* Preserve impact column header styling with icons */
        .impact-column-header {
            display: flex;
            align-items: center;
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid #e5e5e5;
        }

        .impact-column-header h4 {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            letter-spacing: -0.01em;
        }

        .impact-column-header .icon {
            width: 36px;
            height: 36px;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            flex-shrink: 0;
        }

        .impact-positive .icon {
            background: rgba(39, 174, 96, 0.1);
            color: #27ae60;
        }

        .impact-negative .icon {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
        }

        /* AI Analysis Section - streamlined */
        #aiAnalysisSection {
            margin: 3rem 0; /* Consistent spacing */
        }

        .ai-analysis-container {
            background: transparent; /* Remove background */
            border: none; /* Remove border */
            border-radius: 0; /* Remove border radius */
            box-shadow: none; /* Remove shadow */
            padding: 0; /* Remove padding */
            margin-top: 0; /* Remove margin */
        }

        /* Body Measurements Section - streamlined */
        #bodyMeasurementsSection {
            background: transparent; /* Remove background */
            border: none; /* Remove border */
            border-radius: 0; /* Remove border radius */
            box-shadow: none; /* Remove shadow */
            padding: 0; /* Remove padding */
            margin: 3rem 0; /* Consistent spacing */
        }

        /* Detailed Breakdown Section - streamlined */
        #detailedBreakdownSection {
            margin: 3rem 0; /* Consistent spacing */
        }

        /* For the gauge visuals, retain some styling so they're distinguishable */
        .gauge-outer {
            background: #f9f9f9;
            border-radius: 12px;
            padding: 1.5rem;
            transition: box-shadow 0.2s ease;
            margin-bottom: 1.5rem;
        }

        /* Adjust spacing for chart container */
        .chart-container {
            background: #f9f9f9;
            border: none;
            box-shadow: none;
            padding: 1.5rem;
        }

        /* Mobile adjustments */
        @media (max-width: 768px) {
            .results-container {
                gap: 2rem;
            }
            
            .impact-factors-container {
                grid-template-columns: 1fr;
            }
            
            .full-width-section {
                margin: 2rem 0;
            }
            
            #resultsSection h2 {
                font-size: 1.75rem;
                margin-bottom: 2rem;
            }
        }

        .metric-value {
            font-size: 2.25rem; /* Slightly smaller */
            font-weight: 700;
            color: #007AFF;
            margin: 0.5rem 0; /* Reduced margin */
            text-align: center;
            line-height: 1.2;
        }

        .metric-label {
            color: #666;
            font-size: 0.95rem; /* Increased from 0.85rem */
            text-align: center;
            margin-bottom: 1rem; /* Reduced margin */
        }
        
        /* Classes for age shift color coding */
        .age-shift-value {
            font-weight: 500; /* Slightly bolder */
        }
        .age-shift-positive {
            color: #e64c3c; /* Subtle red */
        }
        .age-shift-negative {
            color: #27ae60; /* Subtle green */
        }

        .score-bar {
            height: 8px;
            /* background: #f5f5f5; */ /* Keep overridden value below */
            /* border-radius: 4px; */ /* Keep overridden value below */
            margin: 1rem 0;
            overflow: hidden;
            /* padding: 1rem; */ /* Removed padding causing extra space */
            background: #f8f8f8;
            border-radius: 12px;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.04); /* Subtle inner shadow */
        }

        .score-fill {
            height: 100%;
            background: #007AFF;
            transition: width 0.5s ease;
            border-radius: 12px; /* Added matching border-radius */
        }

        .breakdown-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f1f1f1;
            font-size: 0.95em;
        }

        .breakdown-item:last-child {
            border-bottom: none;
        }

        .breakdown-label {
            font-weight: 500;
            color: #1d1d1f;
        }

        .breakdown-value {
            color: #007AFF;
            font-weight: 600;
        }

        .age-comparison {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 1.5rem 0;
            padding: 1rem;
            background: #f8f8f8;
            border-radius: 12px;
        }

        .age-value {
            text-align: center;
            flex: 1; /* Allow flex items to grow/shrink */
        }

        .age-value .value {
            font-size: 1.8rem; /* Adjusted size */
            font-weight: 700;
            color: #1d1d1f;
        }

        .age-value .label {
            font-size: 0.9rem;
            color: #666;
            margin-top: 0.5rem;
        }

        .age-difference {
            font-size: 1.5rem;
            font-weight: 600;
            color: #007AFF;
        }

        @media (max-width: 768px) {
            .results-container {
                grid-template-columns: 1fr;
                gap: 1.5rem; /* Reduced gap on mobile */
            }

            .metric-value {
                font-size: 2rem;
            }

            .age-comparison {
                flex-direction: column;
                gap: 1rem;
                padding: 0.8rem; /* Adjusted padding */
            }
        }

        /* Detailed Breakdown List */
        .breakdown-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f1f1f1;
            font-size: 0.95em;
        }

        /* --- Gauge Styling --- */
        .gauge-metric {
            margin-bottom: 30px; /* More space between BMI and WHR gauges */
            position: relative;
        }

        .gauge-label {
            font-size: 1.05em; /* Slightly larger label */
            color: #333;
            margin-bottom: 10px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: baseline; /* Align baselines */
            letter-spacing: -0.01em; /* Apple-like tight letter spacing */
        }

        .gauge-container {
            position: relative;
            width: 100%;
            margin-bottom: 8px; /* Less space below gauge */
            padding: 8px 0; /* Add padding above/below for marker visibility */
        }

        .gauge-bar {
            width: 100%;
            height: 10px; /* Slightly thinner but still visible */
            border-radius: 20px; /* More rounded ends */
            /* Adjusted gradient to align with BMI categories on the 15-40 scale */
            /* BMI scale points at: 15, 18.5, 25, 30, 40 */
            /* For a 15-40 scale (25 point range), percentages are: 15=0%, 18.5=14%, 25=40%, 30=60%, 40=100% */
            background: linear-gradient(to right,
                #FF3B30 0%, #FF3B30 14%, /* Red (Underweight <18.5) */
                #34C759 14%, #34C759 40%, /* Green (Healthy 18.5-24.9) */
                #FF9500 40%, #FF9500 60%, /* Orange (Overweight 25-29.9) */
                #FF3B30 60%, #FF3B30 100% /* Red (Obese ≥30) */
            );
            box-shadow: 0 1px 2px rgba(0,0,0,0.08);
        }

        .gauge-marker {
            position: absolute;
            top: 7px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 8px solid #000; /* Black for high contrast */
            z-index: 2;
            filter: drop-shadow(0 1px 1px rgba(0,0,0,0.2));
        }

        /* Add a small white dot at the gauge-marker intersection with bar for better visibility */
        .gauge-marker::after {
            content: '';
            position: absolute;
            width: 4px;
            height: 4px;
            background: white;
            border-radius: 50%;
            top: -10px; /* Position above the triangle */
            left: 50%;
            transform: translateX(-50%);
            box-shadow: 0 0 2px rgba(0,0,0,0.3);
        }

        .gauge-interpretation {
            font-size: 0.85em;
            color: #555;
            margin-top: 8px;
            font-weight: 400;
        }

        /* Add scale markers below the gauge for reference */
        .gauge-scale {
            display: flex;
            justify-content: space-between;
            margin-top: 2px;
            padding: 0 2px;
            font-size: 0.7em;
            color: #888;
        }

        /* Improve the Body Composition section container with Apple-like styling */
        #bodyMeasurementsSection {
            padding: 2rem 1.5rem; /* Adjusted padding */
            margin-top: 2rem;
            margin-bottom: 2rem;
            background: #f9f9f9; /* Simpler light background */
            border-radius: 16px; /* More rounded corners */
            box-shadow: none; /* Removed shadow for flatter design */
            border: 1px solid #e5e5e5; /* Add subtle border */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "San Francisco", "Helvetica Neue", sans-serif; /* Apple system fonts */
        }

        #bodyMeasurementsSection:hover {
            transform: translateY(-2px);
            /* Keep shadow subtle on hover */
            box-shadow: 0 4px 15px rgba(0,0,0,0.06);
        }

        #bodyMeasurementsSection h3 {
            color: #1d1d1f; /* Apple-like dark gray */
            margin-bottom: 2rem; /* Increased space */
            font-weight: 600;
            letter-spacing: -0.01em; /* Slightly tighter letter spacing */
            font-size: 1.5rem;
            text-align: center;
            border-bottom: none; /* Removed border for cleaner title */
            padding-bottom: 0; /* Removed padding */
        }

        #bodyMeasurements {
            max-width: 700px; /* Limit width for better readability */
            margin: 0 auto; /* Center content */
            padding: 0 0.5rem; /* Add slight horizontal padding for content */
        }

        /* Enhanced gauge styling with Apple design cues */
        .gauge-outer {
            background: #ffffff;
            border-radius: 12px;
            padding: 18px 20px; /* Adjusted padding */
            box-shadow: 0 2px 6px rgba(0,0,0,0.04); /* Adjusted shadow */
            margin-bottom: 1.5rem; /* Adjusted spacing */
            border: 1px solid #e5e5e5; /* Consistent border */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            animation: fadeInUp 0.6s ease forwards;
            opacity: 0; /* Start invisible and fade in */
        }

        /* Set different animation delays for second gauge to create staggered effect */
        .gauge-outer:nth-child(2) {
            animation-delay: 0.2s;
        }

        .gauge-outer:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.07);
        }

        .gauge-metric {
            margin-bottom: 20px;
            position: relative;
        }

        .gauge-label {
            font-size: 1.05em; /* Adjusted size */
            color: #1d1d1f;
            margin-bottom: 12px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: baseline; /* Align baselines */
            letter-spacing: -0.01em; /* Apple-like tight letter spacing */
        }

        /* Style the gauge category/risk level information */
        .gauge-metric .gauge-category {
            font-weight: 500;
            color: #666;
            letter-spacing: 0;
            font-size: 0.85em; /* Adjusted size */
        }

        .gauge-container {
            position: relative;
            width: 100%;
            margin-bottom: 6px; /* Reduced padding */
        }

        .gauge-bar {
            width: 100%;
            height: 10px; /* Slightly thinner but still visible */
            border-radius: 20px; /* More rounded ends */
            /* Smoother color gradient with Apple-like colors */
            background: linear-gradient(to right,
                #FF3B30 0%, #FF3B30 16.66%, /* Apple red */
                #FF9500 16.66%, #FF9500 33.33%, /* Apple orange */
                #34C759 33.33%, #34C759 66.66%, /* Apple green */
                #FF9500 66.66%, #FF9500 83.33%, /* Apple orange */
                #FF3B30 83.33%, #FF3B30 100% /* Apple red */
            );
            box-shadow: 0 1px 2px rgba(0,0,0,0.08);
        }

        .gauge-marker {
            position: absolute;
            top: 7px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 8px solid #000; /* Black for high contrast */
            z-index: 2;
            filter: drop-shadow(0 1px 1px rgba(0,0,0,0.2));
        }

        /* Improved scale markers */
        .gauge-scale {
            display: flex;
            justify-content: space-between;
            margin-top: 4px;
            padding: 0 4px; /* Adjusted padding */
            font-size: 0.75em;
            color: #86868b; /* Apple secondary text color */
            font-weight: 500;
        }

        .gauge-interpretation {
            font-size: 0.85em;
            color: #86868b; /* Apple secondary text color */
            margin-top: 12px;
            font-weight: 400;
            line-height: 1.4; /* Improved line height for better readability */
            letter-spacing: -0.01em;
            padding: 0 2px; /* Add slight padding for text alignment */
        }
        /* --- End Gauge Styling --- */

        /* --- Age Impact Factors Section --- */
        .impact-factors-container {
            display: flex;
            flex-direction: column; /* Convert from grid to vertical column */
            gap: 24px; /* Apple-recommended spacing between sections */
            margin-top: 1.5rem;
        }

        .impact-column {
            width: 100%; /* Ensure full width */
            background: transparent; /* Keep our minimalist approach */
            border: none;
            border-radius: 0;
            box-shadow: none;
            padding: 0;
        }

        /* Adjust column header to maintain visual hierarchy */
        .impact-column-header {
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid #e5e5e5;
        }

        /* Preserve color-coding with subtle approach */
        .impact-column:first-child .impact-column-header h4 {
            color: #27ae60; /* Green for positive factors */
        }

        .impact-column:last-child .impact-column-header h4 {
            color: #e74c3c; /* Red for negative factors */
        }

        .impact-column:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.07); /* Adjusted hover shadow */
        }

        .impact-factor {
            display: flex;
            padding: 14px 0; /* Increased vertical padding */
            border-bottom: 1px solid #f5f5f5;
            min-height: 44px; /* Apple's minimum touch target size */
            align-items: flex-start;
            transition: background-color 0.15s ease;
            position: relative; /* For potential future absolute elements if needed */
        }

        .impact-factor:hover {
            background-color: #f9f9f9;
        }

        .impact-factor:last-child {
            border-bottom: none;
        }

        .factor-icon {
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 14px; /* Increased spacing */
            color: #86868b; /* Softer icon color */
        }

        .factor-content {
            flex: 1;
            padding-right: 5px; /* Ensure space for impact value */
        }

        .factor-name {
            font-weight: 600;
            font-size: 1rem; /* Slightly larger */
            color: #1d1d1f;
            margin-bottom: 6px;
            display: flex;
            justify-content: space-between;
            align-items: baseline; /* Keep space-between */
            flex-wrap: wrap; /* Allow wrapping if name is long */
        }

        .factor-impact {
            font-weight: 700;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 0.8rem; /* Slightly smaller impact text */
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
            margin-left: 8px; /* Add space between name and impact */
            white-space: nowrap; /* Prevent impact value wrapping */
            flex-shrink: 0; /* Prevent shrinking */
        }

        .impact-negative .factor-impact {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
        }

        .impact-positive .factor-impact {
            background: rgba(39, 174, 96, 0.1);
            color: #27ae60;
        }

        .factor-description {
            font-size: 0.85rem;
            color: #86868b; /* Consistent secondary text color */
            line-height: 1.5;
        }

        #ageImpactSection {
            background: #f9f9f9; /* Consistent light background */
            border-radius: 16px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: none; /* Remove shadow for flatter look */
            border: 1px solid #e5e5e5; /* Add border */
        }
        
        #ageImpactSection h3 {
            position: relative;
            padding-bottom: 1rem;
            margin-bottom: 1.5rem;
            text-align: center;
            font-weight: 600;
        }
        
        #ageImpactSection h3:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: #007AFF;
            border-radius: 3px;
        }

        @media (max-width: 768px) {
            .impact-factors-container {
                grid-template-columns: 1fr;
            }
            
            .impact-column:first-child {
                margin-bottom: 1rem;
            }
        }
        /* --- End Age Impact Factors Section --- */

        /* --- AI Analysis Section --- */
        .ai-analysis-container {
            background: #ffffff;
            border-radius: 12px; /* Slightly less rounded */
            padding: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border: 1px solid #e5e5e5;
            margin-top: 1rem; /* Add space below section title */
        }

        .ai-status {
            /* Combined loading/error/content display logic, so status div might not be needed */
            display: none; /* Hide if not actively used */
        }

        .ai-loading {
            display: flex;
            align-items: center;
            justify-content: center; /* Center loading indicator */
            gap: 1rem;
            padding: 2rem 0; /* Add padding when loading */
            color: #86868b;
        }

        .ai-loading-icon {
            font-size: 1.8rem; /* Slightly smaller */
            color: #007AFF;
        }

        .ai-content {
            display: none; /* Keep hidden initially */
        }

        .ai-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .ai-icon {
            font-size: 2rem;
            color: #007AFF;
        }

        .ai-branding {
            flex: 1;
        }

        .ai-subtitle {
            font-size: 1rem;
            color: #666;
        }

        .ai-sections {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .ai-section {
            background: #f9f9f9; /* Consistent light background */
            border-radius: 10px;
            padding: 1rem;
            box-shadow: none; /* Remove inner shadow */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            border: 1px solid #ededed; /* Softer border */
        }

        .ai-section:hover {
            transform: none; /* Remove hover effect */
            box-shadow: none;
        }

        .ai-columns {
            display: flex;
            gap: 1rem; /* Add gap between columns */
            justify-content: space-between;
        }

        .ai-column {
            flex: 1;
            background: #f9f9f9; /* Consistent light background */
            border-radius: 10px;
            padding: 1.25rem; /* Adjusted padding */
            box-shadow: none; /* Remove inner shadow */
            transition: none; /* Remove hover effect */
            border: 1px solid #ededed; /* Softer border */
        }

        .ai-column:hover {
            transform: none;
            box-shadow: none;
        }

        .ai-summary, .ai-strengths, .ai-priorities, .ai-recommendations {
            /* These are now divs within ai-section or ai-column, remove extra styling */
            padding: 0;
            border-radius: 0;
            background: none;
            box-shadow: none;
            transition: none;
            border: none;
        }

        .ai-summary:hover, .ai-strengths:hover, .ai-priorities:hover, .ai-recommendations:hover {
            transform: none;
            box-shadow: none;
        }

        .ai-section h5, .ai-column h5 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.75rem; /* Reduced margin below sub-headers */
            color: #1d1d1f; /* Ensure consistent header color */
        }

        .ai-summary p,
        .ai-strengths ul, .ai-priorities ul, .ai-recommendations ul {
            font-size: 0.95rem; /* Slightly larger text */
            color: #3c3c43; /* Slightly darker secondary text */
            line-height: 1.5;
            margin: 0; /* Reset margin */
            padding-left: 0; /* Reset padding for lists */
            list-style-position: inside; /* Keep bullets inside */
        }

        .ai-strengths ul li, .ai-priorities ul li, .ai-recommendations ul li {
            margin-bottom: 0.5rem; /* Space between list items */
        }

        /* Remove redundant styling inherited from general result elements */
        .ai-summary .metric-value, .ai-strengths .metric-value, .ai-priorities .metric-value, .ai-recommendations .metric-value,
        .ai-summary .metric-label, .ai-strengths .metric-label, .ai-priorities .metric-label, .ai-recommendations .metric-label,
        .ai-summary .score-bar, .ai-strengths .score-bar, .ai-priorities .score-bar, .ai-recommendations .score-bar,
        .ai-summary .score-fill, .ai-strengths .score-fill, .ai-priorities .score-fill, .ai-recommendations .score-fill,
        .ai-summary .breakdown-item, .ai-strengths .breakdown-item, .ai-priorities .breakdown-item, .ai-recommendations .breakdown-item,
        .ai-summary .breakdown-label, .ai-strengths .breakdown-label, .ai-priorities .breakdown-label, .ai-recommendations .breakdown-label,
        .ai-summary .breakdown-value, .ai-strengths .breakdown-value, .ai-priorities .breakdown-value, .ai-recommendations .breakdown-value,
        .ai-summary .age-comparison, .ai-strengths .age-comparison, .ai-priorities .age-comparison, .ai-recommendations .age-comparison,
        .ai-summary .age-value, .ai-strengths .age-value, .ai-priorities .age-value, .ai-recommendations .age-value,
        .ai-summary .age-value .value, .ai-strengths .age-value .value, .ai-priorities .age-value .value, .ai-recommendations .age-value .value,
        .ai-summary .age-value .label, .ai-strengths .age-value .label, .ai-priorities .age-value .label, .ai-recommendations .age-value .label,
        .ai-summary .age-difference, .ai-strengths .age-difference, .ai-priorities .age-difference, .ai-recommendations .age-difference {
           /* Remove potentially conflicting styles if not used directly in AI section */
           /* If any ARE used, style them specifically within .ai-* context */
           all: unset; /* Reset inherited styles - use with caution */
           /* Re-apply necessary display styles if needed */
           display: block; /* Or inline, flex etc. as needed */
        }

        @media (max-width: 768px) {
            .ai-columns {
                flex-direction: column;
                gap: 1rem;
            }

            .ai-column {
                width: 100%;
            }

            .ai-summary .metric-value, .ai-strengths .metric-value, .ai-priorities .metric-value, .ai-recommendations .metric-value {
                font-size: 2rem;
            }

            .ai-summary .age-comparison, .ai-strengths .age-comparison, .ai-priorities .age-comparison, .ai-recommendations .age-comparison {
                flex-direction: column;
                gap: 1rem;
            }
        }
        /* --- End AI Analysis Section --- */

        /* --- Detailed Breakdown Chart Section --- */
        .detailed-breakdown-toggle {
            display: flex;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        .segmented-control {
            display: inline-flex;
            background-color: #e9e9eb; /* Lighter gray background */
            border-radius: 9px; /* Apple standard corner radius */
            padding: 3px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        }

        .segmented-control button {
            padding: 8px 20px;
            margin: 0;
            border: none;
            background-color: transparent;
            color: #1d1d1f;
            font-size: 13px; /* Slightly smaller than labels, typical for controls */
            font-weight: 500;
            cursor: pointer; /* Existing */
            border-radius: 7px; /* Slightly less than container - Existing */
            transition: background-color 0.2s ease, color 0.2s ease, box-shadow 0.2s ease; /* Existing */
            min-height: 36px; /* Increased min-height slightly */
            line-height: 1.4; /* Adjusted line height */
            display: inline-flex; /* Ensure flex alignment works */
            align-items: center; /* Vertically center text */
        }

        .segmented-control button.active {
            background-color: #ffffff;
            color: #1d1d1f;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .segmented-control button:not(.active):hover {
            background-color: rgba(0, 0, 0, 0.05); /* Subtle hover effect */
        }

        .chart-container {
            background: #ffffff;
            border-radius: 16px;
            padding: 24px; /* Adjusted padding */
            margin: 24px auto;
            box-shadow: 0 2px 6px rgba(0,0,0,0.04); /* Adjusted shadow */
            border: 1px solid #e5e5e5; /* Add border */
            transition: opacity 0.3s ease, transform 0.3s ease;
            min-height: 400px; /* Adjusted min height */
            width: 95%; /* Made slightly wider */
            max-width: 750px; /* Increased max width */
        }

        .chart-container.hidden {
            display: none; /* Initially hide */
            opacity: 0;
            transform: translateY(10px);
        }
        .chart-container.visible {
            display: block; /* Make visible */
            opacity: 1;
            transform: translateY(0);
        }

        .chart-title {
            color: #1d1d1f;
            font-size: 1.25rem; /* Larger title */
            font-weight: 600; /* Existing */
            text-align: center;
            margin-bottom: 24px; /* Adjusted margin */
            padding-bottom: 0; /* Remove padding */
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            border-bottom: none; /* Removed border */
        }
        /* --- End Detailed Breakdown Chart Section --- */

        /* Ensure chart canvas is responsive */
        canvas {
            max-width: 100%;
            height: auto !important; /* Override Chart.js inline style */
        }
        
        /* Chart fallback for printing */
        .chart-fallback {
            display: none;
        }
        
        .chart-print-image {
            max-width: 100%;
            height: auto;
        }
        
        @media print {
            .chart-fallback {
                display: block;
                page-break-inside: avoid;
                margin: 20px auto;
                text-align: center;
            }
            
            canvas {
                display: none !important;
            }
            
            .chart-container {
                box-shadow: none;
                border: 1px solid #eee;
                page-break-inside: avoid;
            }
            
            .noprint, 
            .detailed-breakdown-toggle, 
            .segmented-control {
                display: none !important;
            }
        }

        /* Responsive adjustments for smaller screens */
        @media (max-width: 768px) {
            .chart-container {
                padding: 20px;
                min-height: 400px;
                width: 95%;
            }
            
            .chart-title {
                font-size: 1.1rem;
                margin-bottom: 20px;
            }
        }

        @media (max-width: 480px) {
            .chart-container {
                padding: 15px;
                min-height: 350px;
            }
            
            /* Adjust segmented control for smaller screens */
            .segmented-control button {
                padding: 6px 15px;
                font-size: 12px;
            }
        }

        /* Add fade-in animation for gauges and ensure San Francisco font family */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Add subtle tick marks to the gauge bars for better visual precision */
        .gauge-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            height: 14px; /* Slightly taller than the bar */
            width: 1px;
            background-color: rgba(255,255,255,0.7);
            transform: translateX(-50%);
            z-index: 1;
        }

        /* Add focus styles for accessibility */
        .gauge-outer:focus-within {
            box-shadow: 0 0 0 3px rgba(0,122,255,0.15); /* Consistent focus shadow */
            outline: none;
        }

        /* Improve the Body Composition section container with Apple-like styling */
        #bodyMeasurementsSection {
            padding: 2rem 1.5rem; /* Adjusted padding */
            margin-top: 2rem;
            margin-bottom: 2rem;
            background: #f9f9f9; /* Simpler light background */
            border-radius: 16px; /* More rounded corners */
            box-shadow: none; /* Removed shadow for flatter design */
            border: 1px solid #e5e5e5; /* Add subtle border */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "San Francisco", "Helvetica Neue", sans-serif; /* Apple system fonts */
        }

        /* Specific styling for Aging Rate card */
        #agingRateCard h3 {
            text-align: center; /* Center the title */
            justify-content: center; /* Center flex items (though ::before is removed) */
            display: block; /* Override flex display from .result-card h3 */
        }

        #agingRateCard h3::before {
            display: none; /* Remove the blue vertical bar */
        }

        #agingRateDisplay {
            text-align: center; /* Center the value and label */
            padding: 1rem 0; /* Add some padding around the value */
        }

        /* Adjust aging rate value specifically if needed */
        #agingRateDisplay .metric-value {
            font-size: 2.75rem; /* Make the aging rate value larger */
            margin-bottom: 0.25rem; /* Reduce space below value */
        }

        /* Adjust aging rate label specifically */
        #agingRateDisplay .metric-label {
             font-size: 0.9rem; /* Slightly smaller label */
             color: #86868b; /* Apple secondary text color */
             margin-top: 0; /* Remove top margin */
        }

        /* Arc Gauge Styling */
        .gauge-wrapper {
            width: 100%;
            margin: 1rem auto 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #agingRateGaugeWrapper {
            margin-top: 1.5rem;
        }

        #agingRateGauge {
            max-width: 100%;
            height: auto;
        }

        #agingRateGauge text {
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "San Francisco", "Helvetica Neue", sans-serif;
        }

        #agingRateNeedle {
            transition: transform 1s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        @media (max-width: 768px) {
            #agingRateGauge {
                width: 280px;
                height: 140px;
            }
        }


        .metric-value {
            font-size: 2.25rem; /* Slightly smaller */
            font-weight: 700;
        }

        /* Premium Styling for Recommendations Section */
        .ai-section > h5 + .ai-recommendations {
            margin-top: 1.5rem; /* Add space below the section title */
        }
        .ai-recommendations {
             /* Apply card styling to the container if needed, or keep it section-based */
        }
        .recommendations-list {
            margin-top: 0; /* Reset margin if container has padding */
            padding: 0.5rem 0; /* Add some vertical padding */
        }
        .recommendation-item {
            display: flex;
            margin-bottom: 1.5rem; /* Spacing between items */
            padding: 1.25rem; /* Increased padding within item */
            background-color: #ffffff; /* White background for card effect */
            border: 1px solid #e5e5e5; /* Softer border */
            border-radius: 12px; /* More rounded corners */
            transition: background-color 0.2s ease, transform 0.2s ease;
            box-shadow: 0 2px 4px rgba(0,0,0,0.03); /* Subtle shadow */
        }
        .recommendation-item:hover {
            background-color: #f8f9fa; /* Slight hover effect */
            transform: translateY(-1px);
        }
        .recommendation-number {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #007AFF;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 1rem;
            flex-shrink: 0;
            font-size: 0.9rem;
        }
        .recommendation-content {
            flex: 1;
            line-height: 1.5;
        }
        .recommendation-content strong {
            color: #1d1d1f;
            font-weight: 600; /* Slightly bolder title */
        }
        .recommendation-steps, .recommendation-benefit {
            margin-top: 0.85rem; /* Increased spacing */
            font-size: 0.9rem; /* Ensured >= 11pt */
            color: #545457;
        }
        .recommendation-steps strong, .recommendation-benefit strong {
            color: #333;
            font-weight: 600;
        }
        .recommendation-steps ol {
            padding-left: 1.5rem;
            margin-top: 0.4rem; /* Space above list items */
        }
         .recommendation-steps ol li {
            margin-bottom: 0.35rem; /* Space between list items */
            line-height: 1.45;
         }
        .explanation {
            font-size: 0.9rem; /* Ensured >= 11pt */
            margin-top: 0.4rem;
            color: #6c757d;
            line-height: 1.4;
        }
        /* Styling for Strengths/Priorities Lists */
        .ai-list {
            list-style: disc; /* Use default disc bullets */
            padding-left: 25px; /* Restore indentation for bullets */
            margin-left: 0; /* Reset margin if needed */
        }
        .ai-list-item {
            margin-bottom: 1rem;
            /* padding-left: 0; Removed - Let list-style handle padding */
            line-height: 1.5;
            list-style-position: outside; /* Ensure bullet is outside text flow */
        }
        /* Ensure icons are hidden */
        .list-icon { display: none !important; }

        /* Loading Animation Styles */
        .ai-status {
            /* Styles for the container holding loading/error */
            text-align: center;
            padding: 2rem 0;
        }
        .ai-loading {
             /* Styles are likely already applied via inline JS - display: flex */
             align-items: center;
             justify-content: center;
             gap: 1rem;
             color: #6c757d;
        }
        .ai-loading-icon {
             font-size: 1.8rem;
             color: #007AFF;
             /* Animation applied via JS/keyframes */
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .ai-error {
            color: #dc3545; /* Bootstrap danger color */
        }
        .ai-error h5 {
            margin-bottom: 0.5rem;
        }

        /* Fix conflicting specific section styles */

        /* Override earlier full-width-section declarations */
        .full-width-section {
            grid-column: 1 / -1;
            margin: 3rem 0;
            padding: 0;
            background: transparent;
            border: none;
            border-radius: 0;
            box-shadow: none;
        }

        /* Override body measurements section specific styling */
        #bodyMeasurementsSection {
            padding: 0;
            margin: 3rem 0;
            background: transparent;
            border: none;
            border-radius: 0;
            box-shadow: none;
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "San Francisco", "Helvetica Neue", sans-serif;
        }

        #bodyMeasurementsSection:hover {
            transform: none;
            box-shadow: none;
        }

        #bodyMeasurementsSection h3 {
            color: #1d1d1f;
            padding-bottom: 0.75rem;
            margin-bottom: 2rem;
            font-size: 1.25rem;
            font-weight: 600;
            border-bottom: 1px solid #e5e5e5;
            text-align: left;
        }

        /* Update gauge styles for minimal look but maintain visual clarity */
        .gauge-outer {
            background: #f9f9f9;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: none;
            box-shadow: none;
        }

        /* Ensure all h3 elements in results sections are consistent */
        #resultsSection h3 {
            color: #1d1d1f;
            padding-bottom: 0.75rem;
            margin-bottom: 2rem;
            font-size: 1.25rem;
            font-weight: 600;
            border-bottom: 1px solid #e5e5e5;
            text-align: left;
        }

        /* Override age impact section styling */
        #ageImpactSection h3:after {
            display: none;
        }

        /* Keep the impact factor items visually distinct */
        .impact-factor {
            padding: 14px 0;
            border-bottom: 1px solid #f5f5f5;
        }

        /* Style chart container consistently */
        .chart-container {
            background: #f9f9f9;
            border-radius: 12px;
            padding: 1.5rem;
            border: none;
            box-shadow: none;
            margin: 1.5rem 0;
        }

        /* AI Analysis Section - Row-Based Layout */
        .ai-content {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .ai-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 24px;
        }

        .ai-icon {
            font-size: 28px;
            color: #007AFF;
        }

        .ai-sections {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        /* Convert AI columns to row-based layout */
        .ai-columns {
            display: flex;
            flex-direction: column;
            gap: 24px;
            width: 100%;
        }

        /* Style individual AI sections/columns consistently */
        .ai-section, .ai-column {
            width: 100%;
            background: #f9f9f9;
            border-radius: 12px;
            padding: 20px;
            margin: 0;
            border: none;
            box-shadow: none;
        }

        .ai-section h5, .ai-column h5 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: #1d1d1f;
            padding-bottom: 8px;
            border-bottom: 1px solid #e5e5e5;
        }

        /* Style content within AI sections */
        .ai-summary p {
            font-size: 15px;
            line-height: 1.5;
            color: #1d1d1f;
            margin: 0;
        }

        .ai-list {
            padding-left: 20px;
            margin: 0;
        }

        .ai-list-item {
            margin-bottom: 12px;
            font-size: 15px;
            line-height: 1.5;
            color: #1d1d1f;
        }

        .ai-list-item:last-child {
            margin-bottom: 0;
        }

        /* Recommendations styling */
        .recommendation-item {
            display: flex;
            margin-bottom: 16px;
            align-items: flex-start;
        }

        .recommendation-item:last-child {
            margin-bottom: 0;
        }

        .recommendation-number {
            background-color: #007AFF;
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
            margin-right: 16px;
            flex-shrink: 0;
        }

        .recommendation-content {
            flex: 1;
        }

        .recommendations-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .recommendation-steps {
            margin-top: 8px;
            color: #666;
        }

        .recommendation-benefit {
            margin-top: 8px;
            color: #27ae60;
        }

        /* Override previous mobile styling */
        @media (max-width: 768px) {
            .ai-section, .ai-column {
                padding: 16px;
            }
        }

        /* Visual separation between stacked sections */
        .impact-column {
            position: relative;
            padding-top: 8px;
            padding-bottom: 8px;
        }

        /* Add subtle indicator for positive/negative columns */
        .impact-column:first-child {
            border-left: 3px solid rgba(39, 174, 96, 0.2);
            padding-left: 16px;
        }

        .impact-column:last-child {
            border-left: 3px solid rgba(231, 76, 60, 0.2);
            padding-left: 16px;
        }

        /* Additional visual polish */
        .ai-analysis-container {
            margin-top: 0;
        }

        /* Premium styling for factor descriptions */
        .factor-description {
            color: #86868b;
            line-height: 1.5;
            font-size: 14px;
            margin-top: 4px;
        }

        /* Maintain touch target sizes for all interactive elements (Apple guideline: 44pt min) */
        .impact-factor, .recommendation-item, .ai-list-item {
            min-height: 44px;
        }

        /* Refined spacing between sections */
        #resultsSection > .full-width-section {
            position: relative;
            padding-top: 16px;
        }

        /* Ensure text is minimum 11pt (Apple guideline) */
        html body .longevity-form-container {
            font-size: 15px;
        }
    </style>

    <!-- JavaScript for Calculations and Form Handling -->
    <script>
    (function($) {
        // --- Configuration & Debugging ---

        // Set to true to enable detailed console logging for debugging.
        const DEBUG = true;

        /**
         * Helper function for conditional console logging.
         * Only outputs messages if DEBUG is true.
         * @param {string} message - The message to log.
         * @param {*} [data=null] - Optional data to log alongside the message.
         */
        function debug(message, data = null) {
            if (DEBUG) {
                if (data) {
                    console.log("DEBUG: " + message, data);
                } else {
                    console.log("DEBUG: " + message);
                }
            }
        }

        // --- Calculation Weights ---
        // These weights are like importance points for each health habit.
        // Think of them as "health points" - the bigger the number, the more that habit matters for your health age.
        // If you want to make a habit more important, just give it a bigger number!
        // Example: If exercise should be super important, you might change 0.2 to 0.4
        const weights = {
            // Body & Fitness Factors - Updated from spreadsheet 2024-07-16
            physicalActivity: 0.5,    // Spreadsheet value: 0.5
            sitToStand: 0.5,         // Spreadsheet value: 0.5
            breathHold: 0.5,         // Spreadsheet value: 0.5
            balance: 0.5,            // Spreadsheet value: 0.5
            
            // Sleep Factors - Updated from spreadsheet 2024-07-16
            sleepDuration: 0.5,      // Spreadsheet value: 0.5
            sleepQuality: 0.5,       // Spreadsheet value: 0.5
            
            // Mental & Social Factors - Updated from spreadsheet 2024-07-16
            stressLevels: 0.6,        // Spreadsheet value: 0.6
            socialConnections: 0.6,  // Spreadsheet value: 0.6
            cognitiveActivity: 0.5,  // Spreadsheet value: 0.5
            
            // Lifestyle Factors - Updated from spreadsheet 2024-07-16
            dietQuality: 0.6,         // Spreadsheet value: 0.6
            alcoholConsumption: 0.5, // Spreadsheet value: 0.5
            smokingStatus: 0.7,       // Spreadsheet value: 0.7
            supplementIntake: 0.4,   // Spreadsheet value: 0.4
            sunlightExposure: 0.4,   // Spreadsheet value: 0.4
            
            // Body Measurements - Updated from spreadsheet 2024-07-16
            bmiScore: 1.0,            // Spreadsheet value: 1.0
            whrScore: 1.0,            // Spreadsheet value: 1.0
            skinElasticity: 0.5,     // Spreadsheet value: 0.5
            overallHealthScore: 0.5   // Spreadsheet value: 0.5 (for score 0-5)
        };

        // --- End Calculation Weights ---

        // --- NEW: Function to calculate Overall Health Score based on percentage ---
        /**
         * Converts the user's self-reported overall health percentage (0-100)
         * into a simplified score from 0 (Very Poor) to 5 (Excellent).
         * If no percentage is given, a neutral score of 3 is assigned.
         * 
         * @param {number|null} overallHealthPercent - User's reported health percentage.
         * @returns {number} - The calculated score (0-5).
         */
        function calculateOverallHealthScore(overallHealthPercent) {
            // If no percentage is provided or it's not a valid number, default to a neutral score of 3.
            if (overallHealthPercent === null || isNaN(overallHealthPercent)) {
                debug("Overall Health Percent not provided or invalid, defaulting score to 3.");
                return 3; 
            }
            
            debug(`Calculating Overall Health Score for percentage: ${overallHealthPercent}`);
            
            // Determine score based on percentage ranges
            if (overallHealthPercent >= 90) return 5; // Excellent
            if (overallHealthPercent >= 75) return 4; // Very Good
            if (overallHealthPercent >= 60) return 3; // Good/Average
            if (overallHealthPercent >= 45) return 2; // Fair
            if (overallHealthPercent >= 30) return 1; // Poor
            return 0; // Very Poor (if less than 30)
        }
        // --- END NEW Function ---

        /**
         * Calculates Body Mass Index (BMI), a measure of body size relative to height.
         * 
         * @param {number} heightCm - User's height in centimeters.
         * @param {number} weightKg - User's weight in kilograms.
         * @returns {number|NaN} - The calculated BMI value, or NaN if inputs are invalid.
         */
        function calculateBMI(heightCm, weightKg) {
            // Check if height and weight are positive numbers
            if (!heightCm || heightCm <= 0 || !weightKg || weightKg <= 0) return NaN;
            // Convert height to meters for the BMI formula
            return weightKg / ((heightCm / 100) ** 2);
        }

        /**
         * Calculates Waist-to-Hip Ratio (WHR), an indicator of body fat distribution.
         * 
         * @param {number} waistCm - User's waist circumference in centimeters.
         * @param {number} hipCm - User's hip circumference in centimeters.
         * @returns {number|NaN} - The calculated WHR value, or NaN if inputs are invalid.
         */
        function calculateWHR(waistCm, hipCm) {
            // Check if measurements are positive numbers
            if (!waistCm || waistCm <= 0 || !hipCm || hipCm <= 0) return NaN;
            return waistCm / hipCm;
        }

        /**
         * Assigns a health score (0-5) based on the calculated BMI.
         * A score of 5 represents the optimal BMI range.
         * Scores are adjusted based on standard BMI categories (Underweight, Healthy, Overweight, Obese).
         * 
         * @param {number} bmi - The calculated BMI value.
         * @returns {number} - The health score (0-5) corresponding to the BMI. Returns 0 if BMI is invalid.
         */
        function getBMIScore(bmi) {
            if (isNaN(bmi)) return 0; // No score if BMI is invalid
            if (bmi < 18.5) return 1;  // Underweight
            if (bmi < 20) return 3;   // Healthy (Lower end)
            if (bmi <= 22) return 5;  // Healthy (Optimal)
            if (bmi <= 25) return 4;  // Healthy (Higher end)
            if (bmi <= 27.5) return 3; // Overweight (Lower end)
            if (bmi <= 30) return 2;  // Overweight (Higher end)
            return 1;                 // Obese
        }

        /**
         * Assigns a health score (0-5) based on the calculated WHR and user's gender.
         * Reflects health risks associated with body shape (fat distribution).
         * Different thresholds are used for males and females. A score of 5 indicates the lowest risk.
         * 
         * @param {number} whr - The calculated WHR value.
         * @param {string} gender - User's gender ('male', 'female', or 'other').
         * @returns {number} - The health score (0-5) corresponding to the WHR. Returns 0 if WHR or gender is invalid.
         */
        function getWHRScore(whr, gender) {
            if (isNaN(whr) || !gender) return 0; // No score if WHR or gender is invalid
            const lowerCaseGender = gender.toLowerCase();

            // Scoring thresholds differ for females
            if (lowerCaseGender === "female") {
                if (whr <= 0.75) return 5; // Low Risk (Optimal)
                if (whr <= 0.80) return 4; // Low Risk
                if (whr <= 0.85) return 3; // Moderate Risk
                if (whr <= 0.90) return 2; // High Risk
                return 1;                 // Very High Risk
            } else { // Scoring for males (and 'other' defaults to male thresholds)
                if (whr <= 0.85) return 5; // Low Risk (Optimal)
                if (whr <= 0.90) return 4; // Low Risk
                if (whr <= 0.95) return 3; // Moderate Risk
                if (whr <= 1.00) return 2; // High Risk
                return 1;                 // Very High Risk
            }
        }

        /**
         * Calculates the estimated adjustment to the user's chronological age based on their lifestyle scores.
         * Each lifestyle factor score (0-5) is compared to an average score of 3.
         * Scores above 3 contribute to a younger biological age (negative shift), while scores below 3 contribute to an older age (positive shift).
         * The impact of each factor is weighted based on its importance (`weights` configuration).
         * The total shift is then adjusted based on the user's actual age to provide a more realistic estimate.
         * 
         * @param {object} scores - Object containing the user's scores for various lifestyle factors.
         * @param {number} age - User's chronological age.
         * @returns {number} - The calculated age shift in years (can be positive or negative).
         */
        function calculateAgeShift(scores, age) {
            let totalShift = 0;
            debug("Calculating age shift. Initial age:", age);
            debug("Scores being used for shift:", scores);
            debug("Weights used:", weights);

            // Iterate through each lifestyle factor defined in the weights configuration
            for (let metric in weights) {
                const score = scores[metric]; // Get the user's score for this factor
                
                // Check if a valid score exists for this metric
                if (typeof score === 'number' && !isNaN(score)) {
                    // Calculate the shift contribution: weight * (average_score - user_score)
                    // A score of 3 is considered average. Scores > 3 reduce age, scores < 3 increase age.
                    const shiftContribution = weights[metric] * (3 - score);
                    totalShift += shiftContribution;
                    debug(`Metric: ${metric}, Score: ${score}, Weight: ${weights[metric]}, Shift Contribution: ${shiftContribution.toFixed(2)}`);
                } else {
                    debug(`Invalid or missing score for metric: ${metric}. Skipping.`);
                }
            }
            debug("Total shift before age adjustment:", totalShift.toFixed(2));

            // Apply age-based adjustments to the calculated shift for realism.
            // Younger individuals have less potential for significant "negative" age shifts.
            // Older individuals might have shifts moderated due to natural aging processes.
            if (age < 25 && totalShift < 0) {
                // Reduce the "younger" effect for individuals under 25.
                // The adjustment is capped to prevent unrealistic negative shifts (e.g., cannot be younger than 0).
                const adjustment = Math.max(totalShift * 0.3, -(age * 0.2));
                debug(`Age < 25 adjustment: ${adjustment.toFixed(2)} (from ${totalShift.toFixed(2)})`);
                totalShift = adjustment;
            } else if (age < 35) {
                // Moderate the shift for individuals under 35.
                const adjustment = totalShift * 0.5;
                debug(`Age < 35 adjustment: ${adjustment.toFixed(2)} (from ${totalShift.toFixed(2)})`);
                totalShift = adjustment;
            } else if (age > 65) {
                // Moderate the shift for individuals over 65.
                const adjustment = totalShift * 0.7;
                debug(`Age > 65 adjustment: ${adjustment.toFixed(2)} (from ${totalShift.toFixed(2)})`);
                totalShift = adjustment;
            }
            debug("Final age shift:", totalShift.toFixed(2));
            return totalShift;
        }

        /**
         * Estimates the user's biological age by adjusting their chronological age based on the calculated age shift.
         * A scaling factor is applied to the age shift to ensure the result is plausible.
         * 
         * @param {number} chronologicalAge - User's actual age in years.
         * @param {number} ageShift - The calculated adjustment based on lifestyle factors (can be positive or negative).
         * @returns {number|NaN} - The estimated biological age, or NaN if inputs are invalid.
         */
        function calculateBiologicalAge(chronologicalAge, ageShift) {
            // Apply only a portion of the calculated shift for a more conservative estimate.
            const scalingFactor = 0.7; 
            
            if (isNaN(chronologicalAge) || isNaN(ageShift)) return NaN; // Check for valid numbers
            
            const bioAge = chronologicalAge + (ageShift * scalingFactor);
            debug(`Calculated Biological Age: ${bioAge.toFixed(1)} (Chrono: ${chronologicalAge}, Shift: ${ageShift.toFixed(2)}, Scale: ${scalingFactor})`);
            // Ensure biological age doesn't fall below a reasonable minimum (e.g., 18)
            return Math.max(18, bioAge); 
        }

        /**
         * Calculates the user's rate of aging by comparing their estimated biological age to their chronological age.
         * - A rate of 1.0 indicates aging at a normal pace.
         * - A rate < 1.0 suggests slower aging.
         * - A rate > 1.0 suggests faster aging.
         * 
         * @param {number} biologicalAge - The estimated biological age.
         * @param {number} chronologicalAge - User's actual age in years.
         * @returns {number|NaN} - The calculated aging rate, or NaN if inputs are invalid or chronological age is zero.
         */
        function calculateAgingRate(biologicalAge, chronologicalAge) {
            // Ensure valid inputs and prevent division by zero
            if (isNaN(biologicalAge) || isNaN(chronologicalAge) || chronologicalAge <= 0) return NaN;
            
            const rate = biologicalAge / chronologicalAge;
            debug(`Calculated Aging Rate: ${rate.toFixed(2)} (BioAge: ${biologicalAge.toFixed(1)}, ChronoAge: ${chronologicalAge})`);
            return rate;
        }

        /**
         * Initiates an asynchronous request to the server for AI-powered analysis
         * based on the user's assessment results. Displays a loading indicator
         * while the analysis is in progress.
         * 
         * @param {object} scores - User's scores for various factors.
         * @param {object} measurements - User's body measurements.
         * @param {number} age - User's chronological age.
         * @param {number} biologicalAge - Calculated biological age.
         * @param {number} ageShift - Calculated age shift.
         * @param {number} agingRate - Calculated aging rate.
         * @param {number} bmi - Calculated BMI.
         * @param {string} bmiCategory - Calculated BMI category text.
         * @param {number} whr - Calculated WHR.
         * @param {string} whrCategory - Calculated WHR category text.
         * @param {array} positiveFactors - Top factors positively impacting age.
         * @param {array} negativeFactors - Top factors negatively impacting age.
         */
        function performAIAnalysis(scores, measurements, age, biologicalAge, ageShift, agingRate, bmi, bmiCategory, whr, whrCategory, positiveFactors, negativeFactors, healthChallenges, healthGoals, fullName, email) { // Added fullName, email
            debug("Starting AI analysis...");
            
            // Show loading indicator
            const aiSection = document.getElementById('aiAnalysisSection');
            const loadingDiv = aiSection.querySelector('.ai-loading');
            const contentDiv = aiSection.querySelector('.ai-content');
            const statusDiv = aiSection.querySelector('.ai-status'); // Get status container
            
            if (!loadingDiv || !contentDiv || !statusDiv) { // Check for statusDiv too
                console.error("AI Analysis section elements not found!");
                return;
            }
            
            // Show loading animation and hide content
            statusDiv.style.display = 'block'; // Make sure status container is visible
            loadingDiv.style.display = 'flex';
            loadingDiv.querySelector('.ai-loading-icon').style.animation = 'spin 1.5s linear infinite';
            contentDiv.style.display = 'none'; // Hide previous results/errors
            
            // Add a spinning animation (ensure keyframes are in CSS now)
            // const style = document.createElement('style');
            // style.textContent = ` ... keyframes ... `;
            // document.head.appendChild(style);
            
            // Prepare data for API
            const analysisData = {
                age: age,
                gender: measurements.gender,
                biologicalAge: biologicalAge.toFixed(1),
                ageShift: ageShift.toFixed(1),
                agingRate: agingRate.toFixed(2),
                bmi: bmi.toFixed(1),
                bmiCategory: bmiCategory,
                whr: whr.toFixed(2),
                whrCategory: whrCategory,
                scores: scores,
                positiveFactors: positiveFactors,
                negativeFactors: negativeFactors,
                healthChallenges: healthChallenges, // Add challenges
                healthGoals: healthGoals,           // Add goals
                fullName: fullName,                 // *** ADDED fullName ***
                email: email                       // *** ADDED email ***
            };
            
            debug("Sending AI analysis data:", analysisData);
            
            // Check if longevity_form_data exists
            if (!window.longevity_form_data) {
                console.error("Cannot perform AI analysis: longevity_form_data is not defined");
                displayAIError('Configuration error. Please contact the site administrator.');
                return;
            }
            
            // Make AJAX request to the server
            $.ajax({
                url: window.longevity_form_data.ajax_url,
                type: 'POST',
                data: {
                    action: 'longevity_ai_analysis',
                    security: window.longevity_form_data.nonce,
                    analysis_data: JSON.stringify(analysisData)
                },
                success: function(response) {
                    debug("AI analysis response received:", response);
                    
                    // Hide loading animation
                    statusDiv.style.display = 'none'; // Hide the whole status container on success
                    loadingDiv.style.display = 'none';
                    
                    if (response.success && response.data) {
                        // Display the AI analysis results
                        displayAIAnalysis(response.data);
                        // Show the content div
                        contentDiv.style.display = 'block';
                    } else {
                        // Display error message with more detail
                        let errorMsg = 'Error analyzing your data.';
                        if (response.data && response.data.message) {
                            errorMsg = response.data.message;
                        }
                        debug("AI analysis error:", errorMsg);
                        displayAIError(errorMsg);
                    }
                },
                error: function(xhr, status, error) {
                    debug("AI analysis request failed:", {xhr: xhr, status: status, error: error});
                    
                    // Hide loading animation, keep status div visible to show error
                    loadingDiv.style.display = 'none'; 
                    statusDiv.style.display = 'block'; 
                    
                    // Attempt to parse response for more details
                    let errorMsg = 'Error connecting to the analysis service. Please try again later.';
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response.data && response.data.message) {
                            errorMsg = response.data.message;
                        }
                    } catch (e) {
                        // If we can't parse the response, use the default error message
                    }
                    
                    // Display error message
                    displayAIError(errorMsg);
                }
            });
        }
        
        /**
         * Displays the AI analysis results in the UI.
         * @param {object} data - The AI analysis data containing summary, strengths, priorities, recommendations.
         */
        function displayAIAnalysis(data) {
            debug("Displaying AI analysis:", data);
            
            // *** NEW: Store AI results for later use ***
            if (completeFormDataForWebhook) {
                completeFormDataForWebhook.ai_results = data;
                debug("Stored AI results into completeFormDataForWebhook", completeFormDataForWebhook);
            } else {
                 console.warn("Cannot store AI results: completeFormDataForWebhook is not yet set.");
            }
            // *** END NEW ***
            
            const aiSection = document.getElementById('aiAnalysisSection');
            if (!aiSection) {
                console.error("AI Analysis section not found!");
                return;
            }
            
            const contentDiv = aiSection.querySelector('.ai-content');
            if (!contentDiv) {
                console.error("AI Analysis content div not found!");
                return;
            }
            
            // Clear previous content before adding new premium structure
            contentDiv.innerHTML = `
                <div class="ai-premium-report">
                    <div class="ai-header">
                        <span class="material-icons ai-icon">psychology</span>
                        <div class="ai-branding">
                            <h4>Premium Health Analysis</h4>
                            <p class="ai-subtitle">Personalized insights for optimal longevity</p>
                        </div>
                    </div>
                    
                    <!-- Introduction Section -->
                    <div class="ai-section">
                        <div class="ai-introduction"></div>
                    </div>
                    
                    <!-- Age Analysis Section -->
                    <div class="ai-section">
                        <h5>Your Biological Age</h5>
                        <div class="ai-biological-age"></div>
                    </div>
                    
                    <!-- Lifestyle Score Section -->
                    <div class="ai-section">
                        <h5>Lifestyle Assessment</h5>
                        <div class="ai-lifestyle-score"></div>
                    </div>
                    
                    <!-- Body Composition Section -->
                    <div class="ai-section">
                        <h5>Body Composition</h5>
                        <div class="ai-body-composition"></div>
                    </div>
                    
                    <!-- Strengths & Areas Section -->
                    <div class="ai-section">
                        <h5>Key Insights</h5>
                        <div class="ai-strengths-areas"></div>
                    </div>
                    
                    <!-- Personalized Insights Section -->
                    <div class="ai-section">
                        <h5>Health Optimization</h5>
                        <div class="ai-personalized-insights"></div>
                    </div>
                    
                    <!-- Recommendations Section -->
                    <div class="ai-section">
                        <h5>Actionable Recommendations</h5>
                        <div class="ai-recommendations"></div>
                    </div>
                    
                    <!-- Closing Section -->
                    <div class="ai-section ai-closing-section">
                        <div class="ai-closing"></div>
                    </div>
                    
                    <!-- Call-to-Action Section -->
                    <div class="ai-section ai-cta-section">
                        <div class="ai-cta"></div>
                    </div>
                </div>
            `;
            
            // Helper function to safely populate content (handles string or array)
            const populateContent = (selector, content) => {
                if (!content) return;
                
                const element = contentDiv.querySelector(selector);
                if (!element) return;
                
                if (typeof content === 'string') {
                    // Sanitize potential markdown list items from AI if needed
                    let sanitizedContent = content.replace(/^\\*\\s*/gm, ''); // Remove leading "* " etc.
                    element.innerHTML = `<p>${sanitizedContent}</p>`;
                } else if (Array.isArray(content)) {
                    // Generate standard HTML list
                    const listItems = content.map(item => {
                        // Sanitize potential markdown list items from AI if needed
                        let sanitizedItem = item.replace(/^\\*\\s*/, ''); // Remove leading "* " etc.
                        return `<li class="ai-list-item">${sanitizedItem}</li>`;
                    }).join('');
                    element.innerHTML = `<ul class="ai-list">${listItems}</ul>`;
                } else if (typeof content === 'object') {
                    // For structured content like recommendations or strengths/areas
                    let html = '';
                    
                    // Handle Strengths & Improvements (data.strengthsAreas)
                    if (selector === '.ai-strengths-areas') {
                        if (content.strengths && Array.isArray(content.strengths)) {
                            html += '<div class="ai-insight-group"><h6>Your Strengths</h6><ul class="ai-list">';
                            content.strengths.forEach(item => {
                                let sanitizedItem = item.replace(/^\\*\\s*/, '');
                                html += `<li class="ai-list-item">${sanitizedItem}</li>`;
                            });
                            html += '</ul></div>';
                        }
                        if (content.improvements && Array.isArray(content.improvements)) {
                            html += '<div class="ai-insight-group"><h6>Improvement Areas</h6><ul class="ai-list">';
                            content.improvements.forEach(item => {
                                let sanitizedItem = item.replace(/^\\*\\s*/, '');
                                html += `<li class="ai-list-item">${sanitizedItem}</li>`;
                            });
                            html += '</ul></div>';
                        }
                    } 
                    // Handle Recommendations (data.recommendations)
                    else if (selector === '.ai-recommendations') {
                        if (content.immediate && Array.isArray(content.immediate)) {
                            html += '<div class="ai-recommendation-group"><h6>Immediate Actions</h6><ul class="ai-list">';
                            content.immediate.forEach(item => {
                                let sanitizedItem = item.replace(/^\\*\\s*/, '');
                                html += `<li class="ai-list-item">${sanitizedItem}</li>`;
                            });
                            html += '</ul></div>';
                        }
                        if (content.ongoing && Array.isArray(content.ongoing)) {
                            html += '<div class="ai-recommendation-group"><h6>Ongoing Habits</h6><ul class="ai-list">';
                            content.ongoing.forEach(item => {
                                let sanitizedItem = item.replace(/^\\*\\s*/, '');
                                html += `<li class="ai-list-item">${sanitizedItem}</li>`;
                            });
                            html += '</ul></div>';
                        }
                        if (content.consultations && Array.isArray(content.consultations)) {
                            html += '<div class="ai-recommendation-group"><h6>Expert Consultations</h6><ul class="ai-list">';
                            content.consultations.forEach(item => {
                                let sanitizedItem = item.replace(/^\\*\\s*/, '');
                                html += `<li class="ai-list-item">${sanitizedItem}</li>`;
                            });
                            html += '</ul></div>';
                        }
                    } 
                    // Handle CTA (data.cta)
                    else if (selector === '.ai-cta') {
                        if (content.consultation && content.programs) {
                             html += `
                                <div class="ai-cta-buttons">
                                    <a href="#schedule-consultation" class="ai-cta-button">${content.consultation}</a>
                                    <a href="#explore-programs" class="ai-cta-button ai-cta-secondary">${content.programs}</a>
                                </div>
                            `;
                        }
                    } 
                    // Handle simple paragraph sections (like intro, age, lifestyle, body comp, insights, closing)
                    else if (typeof content === 'string') {
                        let sanitizedContent = content.replace(/^\\*\\s*/gm, '');
                        html = `<p>${sanitizedContent}</p>`;
                    }
                    
                    element.innerHTML = html;
                }
            };
            
            // Populate all sections from the AI response
            populateContent('.ai-introduction', data.introduction);
            populateContent('.ai-biological-age', data.biologicalAge);
            populateContent('.ai-lifestyle-score', data.lifestyleScore);
            populateContent('.ai-body-composition', data.bodyComposition);
            populateContent('.ai-strengths-areas', data.strengthsAreas); // Handles strengths/improvements object
            populateContent('.ai-personalized-insights', data.personalizedInsights);
            populateContent('.ai-recommendations', data.recommendations); // Handles recommendations object
            populateContent('.ai-closing', data.closing);
            populateContent('.ai-cta', data.cta); // Handles cta object
            
            // Add premium styling for the AI analysis section
            let styleElement = document.getElementById('ai-premium-styles');
            if (!styleElement) {
                styleElement = document.createElement('style');
                styleElement.id = 'ai-premium-styles';
                document.head.appendChild(styleElement);
            }
            
            // Updated Premium Styles
            styleElement.textContent = `
                /* Premium AI Analysis Styling - Apple Design Guidelines */
                .ai-premium-report {
                    font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                    color: #1d1d1f; /* Primary text color */
                    line-height: 1.5;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 0 24px; /* Base padding (3 * 8pt) */
                }
                
                /* Typography - Following Apple's SF Pro scale */
                .ai-header {
                    display: flex;
                    align-items: center;
                    gap: 16px; /* 2 * 8pt */
                    margin-bottom: 40px; /* 5 * 8pt */
                    border-bottom: 1px solid #e5e5e5; /* Subtle separator */
                    padding-bottom: 24px; /* 3 * 8pt */
                }
                
                .ai-icon {
                    font-size: 36px;
                    color: #007AFF; /* Apple Blue */
                    width: 44px;
                    height: 44px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    flex-shrink: 0;
                }
                
                .ai-branding h4 {
                    font-size: 22px; /* Title 2 (approx) */
                    font-weight: 600;
                    margin: 0;
                    letter-spacing: -0.022em;
                    line-height: 1.27;
                }
                
                .ai-subtitle {
                    font-size: 15px; /* Subhead (approx) */
                    color: #86868b; /* Secondary label color */
                    margin: 4px 0 0 0; /* 0.5 * 8pt */
                    letter-spacing: -0.01em;
                    line-height: 1.4;
                }
                
                /* Section Spacing & Structure */
                .ai-section {
                    margin-bottom: 40px; /* Increased spacing between sections (5 * 8pt) */
                    padding-bottom: 0;
                    border: none;
                }
                .ai-section:last-child {
                    margin-bottom: 0; /* No margin for the very last section */
                }
                
                /* Main Section Headers */
                .ai-section > h5 {
                    font-size: 18px; /* Headline (adjusted) */
                    font-weight: 600;
                    margin: 0 0 20px 0; /* Increased space below header (2.5 * 8pt) */
                    color: #1d1d1f;
                    letter-spacing: -0.021em;
                    line-height: 1.29;
                    padding-bottom: 10px; /* Space above potential divider */
                    border-bottom: 1px solid #ebebeb; /* Lighter divider */
                }
                
                /* Sub-Section Headers (within groups) */
                .ai-insight-group > h6, 
                .ai-recommendation-group > h6 {
                    font-size: 16px; /* Subhead (adjusted) */
                    font-weight: 600;
                    margin: 0 0 16px 0; /* Space below sub-header (2 * 8pt) */
                    color: #1d1d1f;
                    letter-spacing: -0.01em;
                    line-height: 1.33;
                    padding-bottom: 8px;
                    border-bottom: 1px solid #f1f1f1; /* Very light divider */
                }
                
                /* Paragraph Styling */
                .ai-section p {
                    font-size: 15px; /* Body (approx) - Min 11pt */
                    line-height: 1.55; /* Increased line height for readability */
                    color: #3c3c43; /* Slightly softer black */
                    margin: 0 0 16px 0; /* 2 * 8pt */
                    letter-spacing: -0.01em;
                }
                
                .ai-section p:last-child {
                    margin-bottom: 0;
                }
                
                /* Introduction - Standard paragraph styling now */
                .ai-introduction {
                    margin-bottom: 0; /* Reset margin as it's within ai-section */
                }
                .ai-introduction p {
                    font-size: 16px; /* Slightly larger for emphasis */
                }
                
                /* List styling - Standard HTML list */
                .ai-list {
                    list-style-type: disc; /* Standard round bullets */
                    padding-left: 20px; /* Indentation for bullets */
                    margin: 0;
                }
                
                .ai-list-item {
                    /* Removed ::before pseudo-element */
                    padding-left: 5px; /* Small space after bullet */
                    margin-bottom: 12px; /* Space between items (1.5 * 8pt) */
                    font-size: 15px; /* Body (approx) */
                    line-height: 1.55; /* Consistent line height */
                    letter-spacing: -0.01em;
                    color: #3c3c43;
                }
                
                .ai-list-item:last-child {
                    margin-bottom: 0;
                }
                
                /* Content grouping for Strengths/Recommendations */
                .ai-insight-group, 
                .ai-recommendation-group {
                    margin-bottom: 24px; /* Space between groups (3 * 8pt) */
                    padding: 20px; /* Internal padding (2.5 * 8pt) */
                    background-color: #f9f9f9; /* Subtle background */
                    border-radius: 12px; /* Consistent radius */
                    border: 1px solid #ededed; /* Soft border */
                }
                
                .ai-insight-group:last-child, 
                .ai-recommendation-group:last-child {
                    margin-bottom: 0;
                }
                
                /* Closing styled as callout */
                .ai-closing-section { /* Target the container section */
                     margin-top: 40px; /* More space above closing */
                }
                .ai-closing {
                    font-style: normal;
                    color: #1d1d1f;
                    padding: 24px; /* 3 * 8pt */
                    text-align: center;
                    font-size: 16px; /* Body (approx) */
                    line-height: 1.5;
                    letter-spacing: -0.021em;
                    margin: 0; /* Reset margin, handled by section */
                    background-color: #f5f5f7; /* Apple light gray */
                    border-radius: 12px;
                    border: none;
                }
                
                /* CTA section & Buttons */
                .ai-cta-section {
                    text-align: center;
                    margin-top: 32px; /* Reduced space above buttons (4 * 8pt) */
                    margin-bottom: 32px; /* Space below buttons */
                    padding-top: 24px; /* Space above buttons */
                    border-top: 1px solid #e5e5e5; /* Separator line */
                }
                
                .ai-cta-buttons {
                    display: flex;
                    justify-content: center;
                    gap: 16px; /* 2 * 8pt */
                    margin-top: 0; /* Remove margin, handled by section padding */
                    flex-wrap: wrap;
                }
                
                /* Updated CTA Button Styles (Min 44x44pt) */
                .ai-cta-button {
                    display: inline-flex; /* Use flex for alignment */
                    align-items: center; /* Center text vertically */
                    justify-content: center; /* Center text horizontally */
                    background-color: #007AFF; /* Apple Blue */
                    color: white;
                    border-radius: 10px; /* Standard radius */
                    /* Ensure padding creates min 44pt height */
                    padding: 12px 24px; /* Adjust padding (total height depends on font size/line height) */
                    min-height: 44px; /* Explicit minimum height */
                    min-width: 160px; /* Adequate minimum width */
                    font-size: 15px; /* Callout (approx) - Min 11pt */
                    font-weight: 500; /* Medium weight */
                    text-decoration: none;
                    transition: background-color 0.2s ease, transform 0.1s ease;
                    border: none;
                    cursor: pointer;
                    letter-spacing: -0.01em;
                    line-height: 1.3; /* Adjust for button text */
                    text-align: center;
                    box-sizing: border-box; /* Include padding/border in size */
                }
                
                .ai-cta-button:hover {
                    background-color: #0056b3; /* Darker blue */
                    /* transform: translateY(-1px); Optional subtle lift */
                }
                
                .ai-cta-button:active {
                    transform: scale(0.98); /* Subtle press effect */
                    background-color: #004080; /* Even darker blue */
                }
                
                .ai-cta-secondary {
                    background-color: transparent;
                    color: #007AFF; /* Apple Blue */
                    border: 1.5px solid #007AFF; /* Border width */
                    padding: calc(12px - 1.5px) calc(24px - 1.5px); /* Adjust padding for border */
                }
                
                .ai-cta-secondary:hover {
                    background-color: rgba(0, 122, 255, 0.1); /* Subtle background on hover */
                }
                
                .ai-cta-secondary:active {
                    background-color: rgba(0, 122, 255, 0.2); /* Slightly darker background on press */
                    transform: scale(0.98);
                }
                
                /* Responsive layout improvements */
                @media (max-width: 768px) {
                    .ai-premium-report {
                        padding: 0 16px; /* 2 * 8pt */
                    }
                    
                    .ai-cta-buttons {
                        flex-direction: column;
                        gap: 16px; /* 2 * 8pt */
                        align-items: stretch; /* Make buttons fill width */
                    }
                    
                    .ai-cta-button {
                        width: 100%; /* Make buttons full width */
                        /* max-width: 340px; /* Optional max-width */
                    }
                    
                    .ai-header {
                        margin-bottom: 32px; /* 4 * 8pt */
                        padding-bottom: 16px;
                    }
                    
                    .ai-section {
                        margin-bottom: 32px; /* 4 * 8pt */
                    }
                    .ai-section > h5 {
                        font-size: 17px; /* Adjust for smaller screens */
                        margin-bottom: 16px;
                        padding-bottom: 8px;
                    }
                     .ai-insight-group > h6, 
                     .ai-recommendation-group > h6 {
                        font-size: 15px; /* Adjust for smaller screens */
                        margin-bottom: 12px;
                     }

                    .ai-insight-group, .ai-recommendation-group {
                        padding: 16px; /* Adjusted padding */
                    }
                    
                    .ai-introduction p {
                        font-size: 15px; /* Adjust for smaller screens */
                    }
                                        
                    .ai-branding h4 {
                        font-size: 20px; /* Adjust for smaller screens */
                    }
                    
                    .ai-list-item {
                        font-size: 14px; /* Adjust for smaller screens */
                    }
                    .ai-closing {
                         font-size: 15px;
                         padding: 20px;
                    }
                    .ai-cta-button {
                         font-size: 14px;
                         padding: 12px 20px;
                         min-height: 44px;
                    }
                     .ai-cta-secondary {
                         padding: calc(12px - 1.5px) calc(20px - 1.5px); /* Adjust padding for border */
                     }
                }
            `;
            
            // Show the content
            contentDiv.style.display = 'block';

            // *** NEW: Add the "Generate Report" button ***
            addGenerateReportButton();
        }
        
        /**
         * Displays an error message in the AI Analysis section.
         * @param {string} message - The error message to display.
         */
        function displayAIError(message) {
            debug("Displaying AI error:", message);
            
            const aiSection = document.getElementById('aiAnalysisSection');
            if (!aiSection) {
                console.error("AI Analysis section not found!");
                return;
            }
            
            const contentDiv = aiSection.querySelector('.ai-content');
            if (!contentDiv) {
                console.error("AI Analysis content div not found!");
                return;
            }
            
            // Display error message with premium styling
            contentDiv.innerHTML = `
                <div class="ai-premium-report">
                    <div class="ai-header">
                        <span class="material-icons ai-icon">psychology</span>
                        <div class="ai-branding">
                            <h4>Premium Health Analysis</h4>
                            <p class="ai-subtitle">Personalized insights for optimal longevity</p>
                        </div>
                    </div>
                    <div class="ai-error">
                        <span class="material-icons ai-error-icon">error_outline</span>
                        <h5>Analysis Error</h5>
                        <p>${message}</p>
                        <p>Your assessment results are still valid and available below.</p>
                    </div>
                </div>
            `;
            
            // Add error-specific styling
            let styleElement = document.getElementById('ai-premium-styles');
            if (!styleElement) {
                styleElement = document.createElement('style');
                styleElement.id = 'ai-premium-styles';
                document.head.appendChild(styleElement);
                
                // Add core premium styles here if they don't exist
                styleElement.textContent = `
                    .ai-premium-report {
                        font-family: -apple-system, BlinkMacSystemFont, "SF Pro Text", "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        color: #1d1d1f;
                        line-height: 1.5;
                        max-width: 800px;
                        margin: 0 auto;
                    }
                    
                    .ai-header {
                        display: flex;
                        align-items: center;
                        gap: 16px;
                        margin-bottom: 32px;
                    }
                    
                    .ai-icon {
                        font-size: 32px;
                        color: #007AFF;
                    }
                    
                    .ai-branding h4 {
                        font-size: 22px;
                        font-weight: 600;
                        margin: 0;
                        letter-spacing: -0.02em;
                    }
                    
                    .ai-subtitle {
                        font-size: 16px;
                        color: #86868b;
                        margin: 4px 0 0 0;
                    }
                `;
            }
            
            // Add error-specific styling
            const errorStyles = `
                .ai-error {
                    text-align: center;
                    padding: 32px 24px;
                    background-color: #f5f5f7;
                    border-radius: 12px;
                    margin-top: 24px;
                    border: none;
                }
                
                .ai-error-icon {
                    font-size: 44px;
                    color: #ff3b30;
                    margin-bottom: 16px;
                    width: 44px;
                    height: 44px;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .ai-error h5 {
                    font-size: 17px;
                    font-weight: 600;
                    margin: 0 0 16px 0;
                    color: #1d1d1f;
                    letter-spacing: -0.022em;
                    line-height: 1.3;
                    border: none;
                }
                
                .ai-error p {
                    font-size: 15px;
                    line-height: 1.5;
                    color: #1d1d1f;
                    margin: 0 0 16px 0;
                    letter-spacing: -0.01em;
                }
                
                .ai-error p:last-child {
                    color: #86868b;
                    font-size: 14px;
                    margin-bottom: 0;
                    letter-spacing: -0.01em;
                }
                
                @media (max-width: 768px) {
                    .ai-error {
                        padding: 24px 16px;
                    }
                    
                    .ai-error h5 {
                        font-size: 16px;
                    }
                }
            `;
            
            // Append error styles to existing styles
            styleElement.textContent += errorStyles;
            
            // Show the content
            contentDiv.style.display = 'block';
        }

        // --- Display & Form Handling ---

        /**
         * Displays the calculated results in the HTML.
         * Finds the results section and populates the relevant divs.
         * @param {object} scores - Object containing all user scores.
         * @param {object} measurements - Object containing height, weight, waist, hip, gender.
         * @param {number} age - User's chronological age.
         * @param {string} healthChallenges - User's stated health challenges.
         * @param {string} healthGoals - User's stated health goals.
         */
        function displayResults(scores, measurements, age, healthChallenges, healthGoals, fullName, email) { // Added fullName, email
            debug("Displaying results...");
            // Get the main results container element
            const resultsSection = document.getElementById('resultsSection');

            // Ensure the results section exists in the DOM
            if (!resultsSection) {
                console.error("Results section element with ID 'resultsSection' not found!");
                return; // Stop if the container isn't found
            }

            // Make the results section visible
            resultsSection.style.display = 'block';

            // --- Calculate Core Metrics ---
            // These are key health indicators derived from the user's input.
            const bmi = calculateBMI(measurements.height, measurements.weight);
            const whr = calculateWHR(measurements.waist, measurements.hip);
            const bmiScore = getBMIScore(bmi);
            const whrScore = getWHRScore(whr, measurements.gender);

            debug("BMI calculated:", { value: bmi, score: bmiScore });
            debug("WHR calculated:", { value: whr, score: whrScore });

            // Add calculated BMI/WHR scores to the main scores object for subsequent calculations
            scores.bmiScore = bmiScore;
            scores.whrScore = whrScore;

            // Calculate Age-related metrics using all available scores
            const ageShift = calculateAgeShift(scores, age);
            const biologicalAge = calculateBiologicalAge(age, ageShift);
            const agingRate = calculateAgingRate(biologicalAge, age);

            // --- Populate Biological Age Card ---
            // Displays the estimated biological age compared to the chronological age.
            const biologicalAgeDiv = document.getElementById('biologicalAgeDisplay');
            if (biologicalAgeDiv) {
                // Construct the display text, showing the age shift (e.g., +2.5 years or -1.0 years)
                let ageShiftHtml = '';
                if (!isNaN(ageShift)) {
                    const shiftValue = ageShift.toFixed(1);
                    const plusSign = ageShift > 0 ? '+' : ''; // Add '+' only for positive shifts
                    // Determine color based on whether the shift is significantly positive or negative
                    let shiftClass = 'age-shift-value';
                    if (ageShift > 0.05) { 
                        shiftClass += ' age-shift-positive'; // Red for older biological age
                    } else if (ageShift < -0.05) {
                        shiftClass += ' age-shift-negative'; // Green for younger biological age
                    }
                    ageShiftHtml = ` (<span class="${shiftClass}">${plusSign}${shiftValue} years</span>)`;
                }
                
                biologicalAgeDiv.innerHTML = `
                    <div class="metric-value">${!isNaN(biologicalAge) ? biologicalAge.toFixed(1) : 'N/A'} years</div>
                    <div class="metric-label">vs Chronological Age: ${age}${ageShiftHtml}</div>
                `;
                debug("Biological Age HTML updated.");
            } else {
                console.error("Element with ID 'biologicalAgeDisplay' not found!");
            }

            // --- Populate Lifestyle Score Card ---
            // Calculates and displays the average score from *direct user lifestyle inputs* (0-5).
            // Excludes scores derived from calculations (like BMI/WHR scores).
            let actualLifestyleScore = NaN; // <<< Declare variable with wider scope
            const lifestyleScoreDiv = document.getElementById('lifestyleScore');
             if (lifestyleScoreDiv) {
                // Define which keys represent direct lifestyle choices for this calculation
                const lifestyleKeys = [ 
                    'physicalActivity', 'sleepDuration', 'sleepQuality', 'stressLevels',
                    'socialConnections', 'dietQuality', 'alcoholConsumption', 'smokingStatus',
                    'cognitiveActivity', 'sunlightExposure', 'supplementIntake', 'sitStand',
                    'breathHold', 'balance', 'skinElasticity'
                ];
                // Get only the scores for the specified lifestyle keys
                const lifestyleScoresOnly = lifestyleKeys
                    .map(key => scores[key])
                    .filter(score => typeof score === 'number' && !isNaN(score)); // Filter out invalid/missing scores
                // Calculate the average lifestyle score
                actualLifestyleScore = lifestyleScoresOnly.length > 0 // <<< Assign value (remove const)
                    ? lifestyleScoresOnly.reduce((a, b) => a + b, 0) / lifestyleScoresOnly.length 
                    : NaN; // Calculate average, or NaN if no valid scores
                debug("Actual Lifestyle Score (Inputs Only) calculated:", { value: actualLifestyleScore, count: lifestyleScoresOnly.length });

                // Display the score and a visual progress bar
                lifestyleScoreDiv.innerHTML = `
                    <div class="metric-value">${!isNaN(actualLifestyleScore) ? actualLifestyleScore.toFixed(1) : 'N/A'}/5</div>
                    <div class="metric-label">Overall Lifestyle Score</div>
                    <div class="score-bar">
                        <div class="score-fill" style="width: ${!isNaN(actualLifestyleScore) ? (actualLifestyleScore/5)*100 : 0}%" ></div>
                    </div>
                `;
                 debug("Lifestyle Score HTML updated.");
            } else { console.error("Element with ID 'lifestyleScore' not found!"); }

             // --- Populate Aging Rate Card (using ZingChart) --- 
             // Displays the calculated aging rate (biological age / chronological age) using a gauge chart.
             const agingRateContainer = document.getElementById('zingChartAgingRateGaugeContainer'); 

             if(agingRateContainer) { 
                 let rateText = 'N/A';
                 let interpretation = 'Not Calculated';
                 if (!isNaN(agingRate)) {
                     rateText = agingRate.toFixed(2);
                     // Simple text interpretation based on the rate
                     if (agingRate > 1.05) interpretation = 'Faster'; 
                     else if (agingRate < 0.95) interpretation = 'Slower';
                     else interpretation = 'Average';
                 }

                 // ZingChart Configuration for the Aging Rate Gauge
                 ZC.LICENSE = ["569d52cefae586f634c54f86dc99e6a9", "b55b025e438fa8a98e32482b5f768ff5"]; // License key

                 const agingRateChartConfig = {
                   type: "gauge",
                   globals: { fontSize: 16 },
                   plotarea: { marginTop: 40, marginBottom: 40 },
                   plot: {
                     size: '100%',
                     valueBox: { // Displays the numeric value and interpretation
                       placement: 'center',
                       text: '%v', 
                       fontSize: 30,
                       paddingBottom: 30, 
                       rules: [ // Add text (Slower/Average/Faster) below the value based on rules
                         { rule: '%v < 0.95', text: '%v<br><span style="font-size:18px;color:#00A99D;">Slower</span>' },
                         { rule: '%v >= 0.95 && %v <= 1.05', text: '%v<br><span style="font-size:18px;color:#888888;">Average</span>' },
                         { rule: '%v > 1.05', text: '%v<br><span style="font-size:18px;color:#F58220;">Faster</span>' }
                       ]
                     }
                   },
                   tooltip: { borderRadius: 5, text: "Aging Rate: %v" },
                   scaleR: { // Configuration for the radial scale (the gauge itself)
                     aperture: 180, // 180 degrees for a semi-circle gauge
                     minValue: 0.6, maxValue: 1.4, step: 0.1,
                     center: { visible: false }, tick: { visible: false }, // Hide center point and ticks
                     item: { offsetR: 0, fontSize: 12, fontColor: '#555' }, // Scale number labels
                     labels: ['0.6', '0.7', '0.8', '0.9', '1.0', '1.1', '1.2', '1.3', '1.4'], // Displayed labels
                     ring: { // The colored background segments of the gauge
                       size: 35, 
                       rules: [ // Define colors based on aging rate values
                         { rule: '%v < 0.95', backgroundColor: '#00A99D' }, // Teal for Slower
                         { rule: '%v >= 0.95 && %v <= 1.05', backgroundColor: '#CCCCCC' }, // Grey for Average
                         { rule: '%v > 1.05', backgroundColor: '#F58220' } // Orange for Faster
                       ]
                     }
                   },
                   series: [{ // The needle indicator
                     values: [isNaN(agingRate) ? 1.0 : parseFloat(rateText)], // Set needle position
                     backgroundColor: '#4A4A4A', 
                     indicator: [10, 1, 10, 10, 0.6], // Needle shape
                     animation: { effect: 2, method: 1, sequence: 4, speed: 900 }, // Needle animation
                   }]
                 };

                 // Render the configured ZingChart gauge
                 zingchart.render({
                   id: 'zingChartAgingRateGaugeContainer',
                   data: agingRateChartConfig,
                   height: '100%', 
                   width: '100%'
                 });
                 debug("Aging Rate ZingChart rendered.");
             } else {
                 console.error("Element with ID 'zingChartAgingRateGaugeContainer' not found!");
             }

            // --- Populate Body Measurements Card (with Gauges) ---
            // Displays BMI and WHR values using visual gauges.
            const bodyMeasurementsDiv = document.getElementById('bodyMeasurements');
            if (bodyMeasurementsDiv) {
                let bmiHtml = '';
                let whrHtml = '';

                // Generate BMI gauge if BMI is valid
                if (!isNaN(bmi)) {
                    // Define the range for the BMI gauge (visual representation)
                    const bmiMin = 15;
                    const bmiMax = 40;
                    // Calculate the marker position as a percentage within the defined range
                    let bmiPercent = ((bmi - bmiMin) / (bmiMax - bmiMin)) * 100;
                    bmiPercent = Math.max(0, Math.min(100, bmiPercent)); // Ensure percentage is between 0 and 100
                    let bmiInterpretation = getBMICategory(bmi); // Get text category (e.g., "Healthy Weight")

                    // HTML structure for the BMI gauge
                    bmiHtml = `
                        <div class="gauge-outer">
                            <div class="gauge-metric">
                                <div class="gauge-label">
                                    <span>BMI: ${bmi.toFixed(1)}</span>
                                    <span class="gauge-category">Category: ${bmiInterpretation}</span>
                                </div>
                                <div class="gauge-container">
                                    <div class="gauge-bar"></div>
                                    <div class="gauge-marker" style="left: ${bmiPercent}%;"></div>
                                </div>
                                <div class="gauge-scale">
                                    <span>15</span><span>20</span><span>25</span><span>30</span><span>35</span><span>40</span>
                                </div>
                                <div class="gauge-interpretation">
                                    BMI (Body Mass Index) measures weight relative to height. Healthy: 18.5-24.9 (green), Overweight: 25-29.9 (yellow), Obese: 30+ (red).
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    bmiHtml = `<div class="gauge-metric"><div class="gauge-label">BMI: N/A</div></div>`;
                }

                // Generate WHR gauge if WHR is valid
                if (!isNaN(whr)) {
                    // Define gender-specific ranges for the WHR gauge
                    const isFemale = measurements.gender.toLowerCase() === 'female';
                    const whrMin = isFemale ? 0.65 : 0.80;
                    const whrMax = isFemale ? 1.0 : 1.15;
                    // Calculate marker position as a percentage
                    let whrPercent = ((whr - whrMin) / (whrMax - whrMin)) * 100;
                    whrPercent = Math.max(0, Math.min(100, whrPercent)); // Ensure percentage is between 0-100
                    let whrInterpretation = getWHRCategory(whr, measurements.gender); // Get text category (e.g., "Low Risk")

                    // HTML structure for the WHR gauge
                    whrHtml = `
                        <div class="gauge-outer">
                            <div class="gauge-metric">
                                <div class="gauge-label">
                                    <span>WHR: ${whr.toFixed(2)}</span>
                                    <span class="gauge-category">Risk Level: ${whrInterpretation}</span>
                                </div>
                                <div class="gauge-container">
                                    <div class="gauge-bar"></div>
                                    <div class="gauge-marker" style="left: ${whrPercent}%;"></div>
                                </div>
                                <div class="gauge-scale">
                                    <span>${isFemale ? '0.65' : '0.80'}</span><span>${isFemale ? '0.75' : '0.90'}</span><span>${isFemale ? '0.85' : '0.95'}</span><span>${isFemale ? '0.95' : '1.05'}</span><span>${isFemale ? '1.0' : '1.15'}</span>
                                </div>
                                <div class="gauge-interpretation">
                                    WHR (Waist-to-Hip Ratio) measures body fat distribution. ${isFemale ? 'Low risk for women ≤ 0.80 (green).' : 'Low risk for men ≤ 0.95 (green).'} Higher values indicate increased risk.
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    whrHtml = `<div class="gauge-metric"><div class="gauge-label">WHR: N/A</div></div>`;
                }

                // Insert the generated HTML for BMI and WHR gauges into the container
                bodyMeasurementsDiv.innerHTML = bmiHtml + whrHtml;
                debug("Body Measurements HTML updated with gauges.");
                
                // Add a subtle animation effect to the gauge markers after they are rendered
                setTimeout(() => {
                    const markers = bodyMeasurementsDiv.querySelectorAll('.gauge-marker');
                    markers.forEach(marker => {
                        marker.style.transition = 'transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)'; // Smooth transition
                        marker.style.transform = 'translateX(-50%) translateY(-2px)'; // Initial move up
                        setTimeout(() => {
                            marker.style.transform = 'translateX(-50%) translateY(0)'; // Move back down
                        }, 100);
                    });
                }, 300); // Delay animation slightly

            } else {
                console.error("Element with ID 'bodyMeasurements' not found!");
            }

            // --- Populate Age Impact Factors Section ---
            // Identifies and displays the top 3 lifestyle factors that most significantly 
            // increase (negative impact) or decrease (positive impact) the calculated biological age.
            function generateAgeImpactFactors(scores) {
                // Defines display names, icons, and brief descriptions for each factor.
                const factorDetails = {
                    physicalActivity: { name: "Physical Activity", icon: "directions_run", descriptions: { positive: "Regular exercise supports overall health.", negative: "Lack of activity can negatively impact health." } },
                    sleepDuration: { name: "Sleep Duration", icon: "bedtime", descriptions: { positive: "Optimal sleep supports recovery.", negative: "Insufficient sleep hinders recovery." } },
                    sleepQuality: { name: "Sleep Quality", icon: "nightlight", descriptions: { positive: "Restful sleep enhances well-being.", negative: "Poor sleep quality detracts from well-being." } },
                    stressLevels: { name: "Stress Management", icon: "spa", descriptions: { positive: "Managing stress protects health.", negative: "High stress can harm health." } },
                    socialConnections: { name: "Social Connections", icon: "people", descriptions: { positive: "Strong social ties benefit health.", negative: "Isolation can negatively affect health." } },
                    dietQuality: { name: "Diet Quality", icon: "restaurant", descriptions: { positive: "A nutritious diet promotes health.", negative: "A poor diet can increase health risks." } },
                    alcoholConsumption: { name: "Alcohol Consumption", icon: "liquor", descriptions: { positive: "Limiting alcohol supports health.", negative: "Excessive alcohol harms health." } },
                    smokingStatus: { name: "Smoking Status", icon: "smoke_free", descriptions: { positive: "Being smoke-free is crucial for health.", negative: "Smoking severely impacts health." } },
                    cognitiveActivity: { name: "Cognitive Activity", icon: "psychology", descriptions: { positive: "Mental stimulation supports brain health.", negative: "Lack of mental activity can affect cognition." } },
                    sunlightExposure: { name: "Sunlight Exposure", icon: "wb_sunny", descriptions: { positive: "Moderate sun exposure provides Vitamin D.", negative: "Lack of sunlight can affect Vitamin D levels." } },
                    supplementIntake: { name: "Supplement Use", icon: "medication", descriptions: { positive: "Targeted supplements can fill nutritional gaps.", negative: "Nutrient deficiencies can impact health." } },
                    bmiScore: { name: "Body Mass Index", icon: "monitor_weight", descriptions: { positive: "Healthy BMI supports metabolic health.", negative: "Suboptimal BMI increases metabolic risks." } },
                    whrScore: { name: "Waist-to-Hip Ratio", icon: "straighten", descriptions: { positive: "Healthy WHR indicates lower visceral fat.", negative: "High WHR suggests higher visceral fat." } },
                    sitToStand: { name: "Functional Strength", icon: "accessibility_new", descriptions: { positive: "Good strength supports independence.", negative: "Poor strength increases dependency risk." } },
                    breathHold: { name: "Respiratory Function", icon: "air", descriptions: { positive: "Good lung capacity supports oxygenation.", negative: "Limited capacity may indicate reduced function." } },
                    balance: { name: "Balance Ability", icon: "airline_seat_recline_normal", descriptions: { positive: "Good balance reduces fall risk.", negative: "Poor balance increases injury risk." } },
                    skinElasticity: { name: "Skin Health", icon: "face", descriptions: { positive: "Good elasticity reflects skin health.", negative: "Reduced elasticity indicates skin aging." } }
                };

                // Calculate the impact of each factor on biological age.
                // Impact = weight * (score - 3). Positive impact = younger age, Negative impact = older age.
                const impactValues = {};
                for (let factor in scores) {
                    if (factor in weights && factor in factorDetails) {
                        const score = scores[factor];
                        if (typeof score === 'number' && !isNaN(score)) {
                            // Calculate the weighted difference from the average score (3)
                            impactValues[factor] = weights[factor] * (score - 3);
                        }
                    }
                }
                
                // If no factors have scores, display a message and exit.
                if (Object.keys(impactValues).length === 0) {
                    return {
                        positive: `<div class="impact-factor"><div class="factor-content"><div class="factor-description" style="text-align: center; padding: 20px 0;">No data available to determine impact factors.</div></div></div>`,
                        negative: `<div class="impact-factor"><div class="factor-content"><div class="factor-description" style="text-align: center; padding: 20px 0;">No data available to determine impact factors.</div></div></div>`
                    };
                }
                
                // Sort factors by the magnitude (absolute value) of their impact, descending.
                const sortedFactors = Object.keys(impactValues)
                    .filter(factor => factorDetails[factor]) // Ensure factor details exist
                    .sort((a, b) => Math.abs(impactValues[b]) - Math.abs(impactValues[a]));
                
                // Separate factors into those that decrease age (positive impact) and increase age (negative impact).
                const positiveFactors = sortedFactors.filter(factor => impactValues[factor] > 0);
                const negativeFactors = sortedFactors.filter(factor => impactValues[factor] < 0);
                
                // Select the top 3 factors from each list.
                const topPositive = positiveFactors.slice(0, 3);
                const topNegative = negativeFactors.slice(0, 3);
                
                // Generate HTML list items for the top positive factors.
                let positiveHtml = '';
                topPositive.forEach(factor => {
                    const details = factorDetails[factor];
                    const impact = impactValues[factor]; // Positive impact value
                    positiveHtml += `
                        <div class="impact-factor">
                            <div class="factor-icon"><span class="material-icons">${details.icon}</span></div>
                            <div class="factor-content">
                                <div class="factor-name">
                                    <span>${details.name}</span>
                                    <span class="factor-impact impact-positive">-${Math.abs(impact).toFixed(1)} yrs</span>
                                </div>
                                <div class="factor-description">${details.descriptions.positive}</div>
                            </div>
                        </div>
                    `;
                });
                
                // Display a placeholder if no significant positive factors are found.
                if (topPositive.length === 0) {
                    positiveHtml = `<div class="impact-factor"><div class="factor-content"><div class="factor-description" style="text-align: center; padding: 20px 0;">No significant factors decreasing your biological age identified.</div></div></div>`;
                }
                
                // Generate HTML list items for the top negative factors.
                let negativeHtml = '';
                topNegative.forEach(factor => {
                    const details = factorDetails[factor];
                    const impact = impactValues[factor]; // Negative impact value
                    negativeHtml += `
                        <div class="impact-factor">
                            <div class="factor-icon"><span class="material-icons">${details.icon}</span></div>
                            <div class="factor-content">
                                <div class="factor-name">
                                    <span>${details.name}</span>
                                    <span class="factor-impact impact-negative">+${Math.abs(impact).toFixed(1)} yrs</span>
                                </div>
                                <div class="factor-description">${details.descriptions.negative}</div>
                            </div>
                        </div>
                    `;
                });
                
                // Display a placeholder if no significant negative factors are found.
                if (topNegative.length === 0) {
                    negativeHtml = `<div class="impact-factor"><div class="factor-content"><div class="factor-description" style="text-align: center; padding: 20px 0;">Great job! No significant factors increasing your biological age identified.</div></div></div>`;
                }
                
                // Return the generated HTML for both positive and negative factors.
                return { positive: positiveHtml, negative: negativeHtml };
            }

            // Generate and display the age impact factors in the corresponding HTML sections.
            const impactFactorsHtml = generateAgeImpactFactors(scores);
            const positiveFactorsDiv = document.querySelector('#ageImpactSection .impact-column:first-child');
            const negativeFactorsDiv = document.querySelector('#ageImpactSection .impact-column:last-child');
            
            if (positiveFactorsDiv && negativeFactorsDiv) {
                // Update the content of the columns, preserving the headers
                const positiveHeader = positiveFactorsDiv.querySelector('.impact-column-header');
                const negativeHeader = negativeFactorsDiv.querySelector('.impact-column-header');
                
                positiveFactorsDiv.innerHTML = '';
                negativeFactorsDiv.innerHTML = '';
                
                // Add headers back
                positiveFactorsDiv.appendChild(positiveHeader);
                negativeFactorsDiv.appendChild(negativeHeader);
                
                // Add the new factor content
                positiveFactorsDiv.innerHTML += impactFactorsHtml.positive;
                negativeFactorsDiv.innerHTML += impactFactorsHtml.negative;
                
                debug("Age Impact Factors HTML updated.");
            } else {
                console.error("Age Impact Factors columns not found!");
            }

            // --- Populate Detailed Breakdown Section with Toggle and Charts ---
            const breakdownSection = document.getElementById('detailedBreakdownSection');
            const detailedBreakdownDiv = document.getElementById('detailedBreakdown');
            // Filter out overallHealthScore as it has no user input
            // const breakdownKeys = Object.keys(weights).filter(key => key !== 'overallHealthScore'); // OLD way

            // --- NEW: Define Canonical Key Order for Consistency ---
            const ALL_METRIC_KEYS_ORDERED = [
                'physicalActivity', 'sitToStand', 'breathHold', 'balance', 'sleepDuration', 
                'sleepQuality', 'stressLevels', 'socialConnections', 'dietQuality', 'alcoholConsumption',
                'smokingStatus', 'cognitiveActivity', 'sunlightExposure', 'supplementIntake', 
                'skinElasticity', 'bmiScore', 'whrScore', 'overallHealthScore' // Keep all relevant keys here in desired chart order
            ];

            // Filter this ordered list based on available scores
            const filteredOrderedKeys = ALL_METRIC_KEYS_ORDERED.filter(key => 
                scores[key] !== undefined && scores[key] !== null && !isNaN(scores[key])
            );
            // --- END NEW ---

            if (breakdownSection && detailedBreakdownDiv) {
                // Clear previous content and add structure
                detailedBreakdownDiv.innerHTML = '';

                // Add Chart Container - only the Polar Chart container
                const scoreChartContainer = document.createElement('div');
                scoreChartContainer.id = 'scoreChartContainer';
                scoreChartContainer.className = 'chart-container visible';
                detailedBreakdownDiv.appendChild(scoreChartContainer);

                // Create Chart - only the Polar Chart
                try {
                    // Pass the filtered *ordered* keys to the chart function
                    createScoreRadarChart(scores, filteredOrderedKeys, scoreChartContainer);
                    debug("Detailed Breakdown Chart created.");
                } catch (error) {
                    console.error("Error creating chart:", error);
                    detailedBreakdownDiv.innerHTML += '<p style="text-align:center; color: red;">Error displaying chart.</p>';
                }
            } else {
                console.error("Detailed Breakdown section or div not found!");
            }

            // --- Scroll to Results ---
            resultsSection.scrollIntoView({ behavior: 'smooth' });
            debug("Scrolled to results section.");
             
            // --- Collect top factors for AI analysis ---
            function getTopFactors() {
                // <<< ADDED factorDetails with descriptions here >>>
                 const factorDetails = {
                    physicalActivity: { name: "Physical Activity", icon: "directions_run", descriptions: { positive: "Regular exercise supports overall health.", negative: "Lack of activity can negatively impact health." } },
                    sleepDuration: { name: "Sleep Duration", icon: "bedtime", descriptions: { positive: "Optimal sleep supports recovery.", negative: "Insufficient sleep hinders recovery." } },
                    sleepQuality: { name: "Sleep Quality", icon: "nightlight", descriptions: { positive: "Restful sleep enhances well-being.", negative: "Poor sleep quality detracts from well-being." } },
                    stressLevels: { name: "Stress Management", icon: "spa", descriptions: { positive: "Managing stress protects health.", negative: "High stress can harm health." } },
                    socialConnections: { name: "Social Connections", icon: "people", descriptions: { positive: "Strong social ties benefit health.", negative: "Isolation can negatively affect health." } },
                    dietQuality: { name: "Diet Quality", icon: "restaurant", descriptions: { positive: "A nutritious diet promotes health.", negative: "A poor diet can increase health risks." } },
                    alcoholConsumption: { name: "Alcohol Consumption", icon: "liquor", descriptions: { positive: "Limiting alcohol supports health.", negative: "Excessive alcohol harms health." } },
                    smokingStatus: { name: "Smoking Status", icon: "smoke_free", descriptions: { positive: "Being smoke-free is crucial for health.", negative: "Smoking severely impacts health." } },
                    cognitiveActivity: { name: "Cognitive Activity", icon: "psychology", descriptions: { positive: "Mental stimulation supports brain health.", negative: "Lack of mental activity can affect cognition." } },
                    sunlightExposure: { name: "Sunlight Exposure", icon: "wb_sunny", descriptions: { positive: "Moderate sun exposure provides Vitamin D.", negative: "Lack of sunlight can affect Vitamin D levels." } },
                    supplementIntake: { name: "Supplement Use", icon: "medication", descriptions: { positive: "Targeted supplements can fill nutritional gaps.", negative: "Nutrient deficiencies can impact health." } },
                    bmiScore: { name: "Body Mass Index", icon: "monitor_weight", descriptions: { positive: "Healthy BMI supports metabolic health.", negative: "Suboptimal BMI increases metabolic risks." } },
                    whrScore: { name: "Waist-to-Hip Ratio", icon: "straighten", descriptions: { positive: "Healthy WHR indicates lower visceral fat.", negative: "High WHR suggests higher visceral fat." } },
                    sitToStand: { name: "Functional Strength", icon: "accessibility_new", descriptions: { positive: "Good strength supports independence.", negative: "Poor strength increases dependency risk." } },
                    breathHold: { name: "Respiratory Function", icon: "air", descriptions: { positive: "Good lung capacity supports oxygenation.", negative: "Limited capacity may indicate reduced function." } },
                    balance: { name: "Balance Ability", icon: "airline_seat_recline_normal", descriptions: { positive: "Good balance reduces fall risk.", negative: "Poor balance increases injury risk." } },
                    skinElasticity: { name: "Skin Health", icon: "face", descriptions: { positive: "Good elasticity reflects skin health.", negative: "Reduced elasticity indicates skin aging." } }
                };
                // <<< END ADDED factorDetails >>>

                // Calculate impact values
                const impactValues = {};
                for (let factor in scores) {
                    if (factor in weights && factor in factorDetails) {
                        const score = scores[factor];
                        // <<< Added check for valid score before calculating impact >>>
                        if (typeof score === 'number' && !isNaN(score)) {
                           impactValues[factor] = weights[factor] * (score - 3);
                        }
                    }
                }
                
                // Sort and separate factors
                const sortedFactors = Object.keys(impactValues)
                    .filter(factor => factorDetails[factor]) // Still filter based on existence in factorDetails
                    .sort((a, b) => Math.abs(impactValues[b]) - Math.abs(impactValues[a]));
                
                const positiveFactors = sortedFactors
                    .filter(factor => impactValues[factor] > 0)
                    .map(factor => ({
                        name: factorDetails[factor].name,
                        impact: impactValues[factor],
                        description: factorDetails[factor]?.descriptions?.positive || '' // <<< ADDED description
                    }));
                
                const negativeFactors = sortedFactors
                    .filter(factor => impactValues[factor] < 0)
                    .map(factor => ({
                        name: factorDetails[factor].name,
                        impact: impactValues[factor],
                        description: factorDetails[factor]?.descriptions?.negative || '' // <<< ADDED description
                    }));
                    
                return { positiveFactors, negativeFactors };
            }
            
            // Get the top factors
            const { positiveFactors, negativeFactors } = getTopFactors();
            
            // --- NEW: Generate Chart URLs using QuickChart ---
            let biological_age_chart_url = '';
            let age_impact_chart_url = '';
            let detailed_scores_chart_url = '';
            let aging_rate_chart_url = ''; // New key for clarity

            try {
                biological_age_chart_url = generateBioAgeComparisonChartUrl(age, biologicalAge);
                debug("Generated biological_age_chart_url:", biological_age_chart_url);

                aging_rate_chart_url = generateAgingRateGaugeChartUrl(agingRate);
                debug("Generated aging_rate_chart_url:", aging_rate_chart_url);
                
                // Use the filteredOrderedKeys which are calculated just before chart creation
                const filteredOrderedKeys = ALL_METRIC_KEYS_ORDERED.filter(key => 
                    scores[key] !== undefined && scores[key] !== null && !isNaN(scores[key])
                );
                detailed_scores_chart_url = generateDetailedScoresRadarChartUrl(scores, filteredOrderedKeys);
                debug("Generated detailed_scores_chart_url:", detailed_scores_chart_url);

                age_impact_chart_url = generateAgeImpactBarChartUrl(positiveFactors, negativeFactors);
                debug("Generated age_impact_chart_url:", age_impact_chart_url);

            } catch (chartError) {
                console.error("Error generating chart URLs:", chartError);
                // Optionally display an error or proceed without chart URLs
            }
            // --- END NEW: Generate Chart URLs ---

            // --- Perform AI Analysis ---
            const bmiCategory = getBMICategory(bmi);
            // --- Perform AI Analysis ---
            const whrCategory = getWHRCategory(whr, measurements.gender);

            // Check if we have the necessary data for the API call
            if (window.longevity_form_data && window.Chart) { // Also check for Chart.js
                // *** MOVED & UPDATED: Update the global webhook object with calculated values ***
                if (completeFormDataForWebhook) {
                    completeFormDataForWebhook.biologicalAge = !isNaN(biologicalAge) ? parseFloat(biologicalAge.toFixed(1)) : null;
                    completeFormDataForWebhook.ageShift = !isNaN(ageShift) ? parseFloat(ageShift.toFixed(1)) : null;
                    completeFormDataForWebhook.agingRate = !isNaN(agingRate) ? parseFloat(agingRate.toFixed(2)) : null;
                    completeFormDataForWebhook.bmi = !isNaN(bmi) ? parseFloat(bmi.toFixed(1)) : null;
                    completeFormDataForWebhook.bmiCategory = bmiCategory; // Now defined
                    completeFormDataForWebhook.whr = !isNaN(whr) ? parseFloat(whr.toFixed(2)) : null;
                    completeFormDataForWebhook.whrCategory = whrCategory; // Now defined
                    completeFormDataForWebhook.positiveFactors = positiveFactors; // Now defined
                    completeFormDataForWebhook.negativeFactors = negativeFactors; // Now defined
                    // Store the calculated lifestyle score (average of direct inputs)
                    completeFormDataForWebhook.lifestyle_score_value = !isNaN(actualLifestyleScore) ? parseFloat(actualLifestyleScore.toFixed(1)) : null;
                    // Update scores object within webhook data in case bmi/whr scores were added
                    completeFormDataForWebhook.scores = scores;

                    // *** NEW: Add generated chart URLs ***
                    completeFormDataForWebhook.biological_age_chart_url = biological_age_chart_url;
                    completeFormDataForWebhook.age_impact_chart_url = age_impact_chart_url;
                    completeFormDataForWebhook.detailed_scores_chart_url = detailed_scores_chart_url;
                    completeFormDataForWebhook.aging_rate_chart_url = aging_rate_chart_url; // Using new key
                    // We decided not to generate body_composition_chart_url
                    completeFormDataForWebhook.body_composition_chart_url = ''; 

                    debug("Updated completeFormDataForWebhook with calculated metrics AND CHART URLs:", completeFormDataForWebhook);
                } else {
                    console.warn("Cannot update webhook data: completeFormDataForWebhook is not initialized.");
                }
                // *** END MOVED & UPDATED ***

                // Call the AI analysis function, passing all relevant data
                performAIAnalysis(
                    scores, 
                    measurements, 
                    age, 
                    biologicalAge, 
                    ageShift, 
                    agingRate, 
                    bmi, 
                    bmiCategory, 
                    whr, 
                    whrCategory, 
                    positiveFactors, 
                    negativeFactors,
                    healthChallenges,
                    healthGoals,
                    fullName, 
                    email
                );
            } else {
                console.error("Cannot perform AI analysis: longevity_form_data or Chart.js missing");
                displayAIError('Configuration error prevented AI analysis.'); // Use the existing error display
            }
        }

        /**
         * NEW Helper: Determines BMI category text.
         * @param {number} bmi - Calculated BMI.
         * @returns {string} - Category description.
         */
        function getBMICategory(bmi) {
            if (isNaN(bmi)) return 'N/A';
            if (bmi < 18.5) return 'Underweight';
            if (bmi < 25) return 'Healthy Weight';
            if (bmi < 30) return 'Overweight';
            return 'Obese';
        }

        /**
         * NEW Helper: Determines WHR risk category text.
         * @param {number} whr - Calculated WHR.
         * @param {string} gender - User gender.
         * @returns {string} - Risk category description.
         */
        function getWHRCategory(whr, gender) {
            if (isNaN(whr) || !gender) return 'N/A';
            const lowerCaseGender = gender.toLowerCase();

            if (lowerCaseGender === "female") {
                if (whr <= 0.80) return 'Low Risk';
                if (whr <= 0.85) return 'Moderate Risk';
                return 'High Risk';
            } else { // Male or Other
                if (whr <= 0.95) return 'Low Risk';
                if (whr <= 1.00) return 'Moderate Risk';
                return 'High Risk';
            }
        }

        /**
         * Sets up the event listener for the form submission.
         * Uses jQuery for potentially better compatibility within WordPress.
         */
        function setupFormListener() {
            // Select the form using its ID with jQuery
            const form = $('#longevityForm');

            // Check if the form was actually found
            if (form.length === 0) {
                console.error("Longevity form not found using jQuery selector '#longevityForm'!");
                return; // Stop if form doesn't exist
            }
            debug("Form found using jQuery, attaching submit listener...");

            // Track if the initial calculation has been done
            let initialCalculationDone = false;

            // Attach the submit event handler
            form.on('submit', function(e) {
                e.preventDefault(); // IMPORTANT: Prevent the default browser form submission
                debug("Form submitted, processing data...");

                // Process form data and display results
                processFormData();
                
                // After the first calculation, set up live updates
                if (!initialCalculationDone) {
                    setupLiveUpdates();
                    initialCalculationDone = true;
                }
            });
            
            /**
             * Process the form data and display results
             */
            function processFormData() {
                // Use the FormData API to easily get all values from the form fields
                const formData = new FormData(form[0]); // form[0] refers to the DOM element

                // Extract measurement values, converting to numbers and providing defaults
                const measurements = {
                    height: parseFloat(formData.get('height')) || 0, // Get 'height' field, convert to float, default to 0
                    weight: parseFloat(formData.get('weight')) || 0, // Get 'weight' field
                    waist: parseFloat(formData.get('waist')) || 0,   // Get 'waist' field
                    hip: parseFloat(formData.get('hip')) || 0,     // Get 'hip' field
                    overallHealthPercent: parseFloat(formData.get('overallHealthPercent')) || null, // Get 'overallHealthPercent' field, null if empty/invalid
                    gender: formData.get('gender'),                 // Get 'gender' field (string)
                    age: parseInt(formData.get('age'), 10) || 0,      // Get 'age' field, convert to integer (base 10), default 0
                    healthChallenges: formData.get('healthChallenges') || '', // Get challenges text
                    healthGoals: formData.get('healthGoals') || ''          // Get goals text
                };

                // *** MODIFIED: Extract fullName and email explicitly using standard JS ***
                const fullNameValue = document.getElementById('fullName') ? document.getElementById('fullName').value : 'N/A';
                const emailValue = document.getElementById('email') ? document.getElementById('email').value : 'N/A';
                // Use fallback if empty string
                const fullName = fullNameValue.trim() !== '' ? fullNameValue : 'N/A';
                const email = emailValue.trim() !== '' ? emailValue : 'N/A';
                // *** END MODIFIED ***

                // Extract score values from select dropdowns, converting to numbers
                // MODIFIED: Also capture selected TEXT
                const scoreKeys = [
                    'activity', 'sleepDuration', 'sleepQuality', 'stressLevels',
                    'socialConnections', 'dietQuality', 'alcoholConsumption', 'smokingStatus',
                    'cognitiveActivity', 'sunlightExposure', 'supplementIntake', 'sitStand',
                    'breathHold', 'balance', 'skinElasticity'
                ];
                const scores = {};
                const answersText = {}; // *** NEW object to store text answers ***

                scoreKeys.forEach(key => {
                    const inputElement = document.getElementById(key); // Get the select element
                    if (inputElement && inputElement.tagName === 'SELECT') {
                        const rawValue = inputElement.value;
                        const selectedIndex = inputElement.selectedIndex;
                        const rawText = (selectedIndex >= 0) ? inputElement.options[selectedIndex].text : '';

                        // Map form field names to weights property names if necessary (reuse existing map)
                        const weightKeyMap = {
                            'activity': 'physicalActivity', 'sitStand': 'sitToStand', 'sleepDuration': 'sleepDuration',
                            'sleepQuality': 'sleepQuality', 'stressLevels': 'stressLevels', 'socialConnections': 'socialConnections',
                            'dietQuality': 'dietQuality', 'alcoholConsumption': 'alcoholConsumption', 'smokingStatus': 'smokingStatus',
                            'cognitiveActivity': 'cognitiveActivity', 'sunlightExposure': 'sunlightExposure',
                            'supplementIntake': 'supplementIntake', 'breathHold': 'breathHold', 'balance': 'balance',
                            'skinElasticity': 'skinElasticity'
                        };
                        const scoreKey = weightKeyMap[key] || key;

                        // Only include values that were actually selected
                        if (rawValue && rawValue.trim() !== '') {
                            const value = parseInt(rawValue, 10);
                            if (!isNaN(value)) {
                                scores[scoreKey] = value; // Store numeric value
                                answersText[scoreKey] = rawText; // *** Store text answer ***
                            }
                        }
                    } else if (inputElement) {
                        // Handle non-select inputs if needed in the future
                        debug(`Element with key ${key} is not a SELECT element.`);
                    } else {
                         debug(`Element with key ${key} not found.`);
                    }
                });

                // --- Calculate and Add Overall Health Score --- (Keep as is)
                scores.overallHealthScore = calculateOverallHealthScore(measurements.overallHealthPercent);
                if (scores.overallHealthScore !== undefined) { // Add text equivalent if needed
                    const percent = measurements.overallHealthPercent;
                    if (percent !== null) {
                         if (percent >= 90) answersText.overallHealthScore = 'Excellent (90%+)';
                         else if (percent >= 75) answersText.overallHealthScore = 'Very Good (75-89%)';
                         else if (percent >= 60) answersText.overallHealthScore = 'Good/Average (60-74%)';
                         else if (percent >= 45) answersText.overallHealthScore = 'Fair (45-59%)';
                         else if (percent >= 30) answersText.overallHealthScore = 'Poor (30-44%)';
                         else answersText.overallHealthScore = 'Very Poor (<30%)';
                    } else {
                        answersText.overallHealthScore = 'Average (Not Provided)'; // Default text if no percentage given
                    }
                }
                // --- END Overall Health Score ---


                debug("Collected Measurements:", measurements);
                debug("Collected Scores (Numeric):", scores);
                debug("Collected Answers (Text):", answersText); // Log the text answers

                // --- Basic Input Validation --- (Keep as is)
                // Add checks here for essential fields before proceeding with calculations.
                if (!measurements.age || measurements.age < 18) {
                    alert("Please enter a valid age (18+).");
                    console.error("Invalid age entered:", measurements.age);
                    return false; // Stop processing and return false to indicate validation failed
                }
                if (!measurements.gender) {
                    alert("Please select your gender.");
                    console.error("Gender not selected");
                    return false; // Stop processing
                }
                // Check for valid positive numbers for measurements involved in division
                if (!measurements.height || measurements.height <= 0 || !measurements.weight || measurements.weight <= 0) {
                    alert("Please enter valid positive numbers for height and weight.");
                    console.error("Invalid height/weight:", measurements);
                    return false;
                }
                if (!measurements.waist || measurements.waist <= 0 || !measurements.hip || measurements.hip <= 0) {
                    alert("Please enter valid positive numbers for waist and hip measurements.");
                    console.error("Invalid waist/hip:", measurements);
                    return false;
                }

                // --- Trigger Calculations & Display ---
                // Pass the collected data to the displayResults function, which handles calculations.
                
                // Map form field names to weights property names to ensure connection
                const weightPropertyMap = {
                    'activity': 'physicalActivity',
                    'sitStand': 'sitToStand'
                };
                
                // Add mapped properties to scores object
                Object.keys(weightPropertyMap).forEach(formField => {
                    if (scores[formField] !== undefined) {
                        scores[weightPropertyMap[formField]] = scores[formField];
                        debug(`Mapped ${formField} (${scores[formField]}) to ${weightPropertyMap[formField]}`);
                    }
                });
                
                // *** NEW: Store initial form data and metrics for webhook ***
                completeFormDataForWebhook = {
                     // Include all the fields your Make.com payload expects initially
                     fullName: fullName,
                     email: email,
                     age: measurements.age,
                     gender: measurements.gender,
                     biologicalAge: null, // Will be filled by displayResults
                     ageShift: null,      // Will be filled by displayResults
                     agingRate: null,     // Will be filled by displayResults
                     bmi: null,           // Will be filled by displayResults
                     bmiCategory: null, // Will be filled by displayResults
                     whr: null,           // Will be filled by displayResults
                     whrCategory: null, // Will be filled by displayResults
                     scores: scores,      // The numeric scores { key: value, ... }
                     answersText: answersText, // *** ADDED the text answers object ***
                     positiveFactors: [], // Will be filled by displayResults
                     negativeFactors: [], // Will be filled by displayResults
                     healthChallenges: measurements.healthChallenges,
                     healthGoals: measurements.healthGoals,
                     ai_results: null // Placeholder for AI results
                };
                debug("Initial data stored for webhook", completeFormDataForWebhook);
                // *** END NEW ***

                displayResults(scores, measurements, measurements.age, measurements.healthChallenges, measurements.healthGoals, fullName, email); 
                return true; // Return true to indicate success
            }
            
            /**
             * Set up live updates for all form inputs after the initial calculation
             */
            function setupLiveUpdates() {
                debug("Setting up live updates for form inputs...");
                
                // Add change event listeners to all form inputs
                form.find('input, select').on('change', function() {
                    debug("Form input changed, updating results...");
                    
                    // Only update if the results section is already visible
                    if ($('#resultsSection').is(':visible')) {
                        processFormData();
                    }
                });
                
                debug("Live updates configured successfully.");
            }
        }

        // --- Initialization ---
        
        // *** NEW: Global variable to store complete data ***
        let completeFormDataForWebhook = null;

        // Use jQuery's document ready function to ensure the DOM is fully loaded
        // before trying to attach the form listener.
        $(document).ready(function() {
             debug("Document ready, setting up form listener...");
             
             // Register Chart.js Annotation plugin if available globally
             if (window.Chart && window.ChartAnnotation) {
                 Chart.register(ChartAnnotation);
                 debug("Chart.js Annotation plugin registered");
             }
             
            // Set up the main form submission listener.
            setupFormListener(); 
        });

        // --- Chart Creation Functions ---

        /**
         * Creates and renders the Score Radar Chart using Chart.js.
         * Displays individual health metric scores (0-5) in a radar format.
         * 
         * @param {object} scores - Object containing scores for each metric (e.g., { physicalActivity: 4, dietQuality: 5 }).
         * @param {string[]} orderedMetricKeys - Array of metric keys in the desired display order.
         * @param {HTMLElement} containerElement - The HTML element where the chart canvas will be inserted.
         */
        function createScoreRadarChart(scores, orderedMetricKeys, containerElement) {
            debug("Creating Score Radar Chart with ordered keys:", orderedMetricKeys);
            // Ensure Chart.js library is loaded
            if (!window.Chart) {
                console.error("Chart.js not loaded!");
                containerElement.innerHTML = '<p style="text-align:center; color: red;">Chart library not loaded.</p>';
                return;
            }

            // Use the pre-filtered and ordered keys passed to the function
            const filteredBreakdownKeys = orderedMetricKeys; 
            
            // Do not render chart if there are no valid scores to display
            if (filteredBreakdownKeys.length === 0) {
                containerElement.innerHTML = '<p style="text-align:center;">No data available for visualization. Please fill out at least one question.</p>';
                return;
            }

            // Create a canvas element for the chart
            const canvas = document.createElement('canvas');
            canvas.id = 'scoreRadarChart';
            canvas.style.minHeight = '350px';
            canvas.style.margin = '0 auto'; 

            // Helper function to format metric keys into readable labels for the chart
            const formatLabel = (label) => {
                // Add spaces before capital letters, capitalize first letter, remove common suffixes/prefixes
                let formattedLabel = label
                    .replace(/([A-Z])/g, ' $1')
                    .replace(/^./, str => str.toUpperCase())
                    .replace(' Score', '')
                    .replace('Bmi', 'BMI')
                    .replace('Whr', 'WHR');
                
                // Shorten very long labels to prevent overlap
                if (formattedLabel.length > 15) {
                    return formattedLabel.substring(0, 13) + '...';
                }
                return formattedLabel;
            };

            // Extract the raw score values corresponding to the ordered keys
            const rawScores = filteredBreakdownKeys.map(metric => scores[metric]);

            // Define point colors based on score values (higher scores = greener, lower scores = redder)
            const pointColors = rawScores.map(val => {
                if (val >= 4.5) return 'rgba(0, 180, 0, 1)';       // Excellent
                else if (val >= 3.5) return 'rgba(76, 187, 23, 1)'; // Good
                else if (val >= 3.0) return 'rgba(156, 204, 10, 1)'; // Above Average
                else if (val >= 2.5) return 'rgba(255, 204, 0, 1)'; // Average
                else if (val >= 2.0) return 'rgba(255, 149, 0, 1)'; // Below Average
                else if (val >= 1.5) return 'rgba(255, 59, 48, 1)'; // Poor
                else return 'rgba(215, 0, 21, 1)';                  // Very Poor
            });

            // Prepare the data structure for Chart.js
            const data = {
                labels: filteredBreakdownKeys.map(metric => formatLabel(metric)), // Use formatted labels
                datasets: [{
                    label: 'Health Metrics (0–5)', // Dataset label for legend
                    data: rawScores, // The score values
                    fill: true, // Fill the area under the line
                    backgroundColor: 'rgba(54, 162, 235, 0.2)', // Light blue fill
                    borderColor: 'rgba(0, 122, 255, 0.8)', // Blue line
                    pointBackgroundColor: pointColors, // Use calculated colors for points
                    pointBorderColor: 'white',
                    pointBorderWidth: 1.5,
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: pointColors,
                    pointRadius: window.innerWidth <= 480 ? 4 : 5, // Adjust point size for mobile
                    pointHoverRadius: window.innerWidth <= 480 ? 6 : 7,
                    borderWidth: 2
                }]
            };

            // Configure Chart.js options for appearance and behavior
            const config = {
                type: 'radar',
                data: data,
                options: {
                    responsive: true, // Chart adjusts to container size
                    maintainAspectRatio: true,
                    aspectRatio: 1, // Maintain a square aspect ratio
                    layout: { padding: { top: 15, right: 25, bottom: 15, left: 25 } }, // Chart padding
                    animation: { duration: 1000, easing: 'easeOutQuart' }, // Animation settings
                    scales: {
                        r: { // Radial axis (0-5 score)
                            min: 0, max: 5, beginAtZero: true,
                            grid: { color: 'rgba(0, 0, 0, 0.08)', lineWidth: 1 }, // Circular grid lines
                            angleLines: { color: 'rgba(0, 0, 0, 0.08)', lineWidth: 1 }, // Lines radiating from center
                            pointLabels: { // Labels for each metric (e.g., "Diet Quality")
                                font: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 11 : 13, weight: '500' },
                                color: '#2C3E50',
                                padding: window.innerWidth <= 480 ? 6 : 10, 
                                display: true
                            },
                            ticks: { // Numeric labels on the radial axis (0, 1, 2, 3, 4, 5)
                                stepSize: 1,
                                backdropColor: 'rgba(255, 255, 255, 0.85)', 
                                backdropPadding: 3,
                                font: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 10 : 11 },
                                color: '#636366', 
                                showLabelBackdrop: false, // Don't show background behind ticks
                            },
                            // Optional: Background gradient for visual appeal
                            backgroundColor: function(context) {
                                const chart = context.chart;
                                const {ctx, chartArea} = chart;
                                if (!chartArea) return;
                                const outerAreaGradient = ctx.createRadialGradient( chart.getDatasetMeta(0).data[0].x, chart.getDatasetMeta(0).data[0].y, 0, chart.getDatasetMeta(0).data[0].x, chart.getDatasetMeta(0).data[0].y, chart.scales.r.drawingArea );
                                outerAreaGradient.addColorStop(0.6, 'rgba(255, 255, 255, 0)');
                                outerAreaGradient.addColorStop(1, 'rgba(239, 246, 255, 0.3)');
                                return outerAreaGradient;
                            }
                        }
                    },
                    plugins: {
                        legend: { // Chart legend configuration
                            display: true,
                            position: 'bottom',
                            labels: { boxWidth: 20, padding: window.innerWidth <= 480 ? 10 : 15, font: { size: window.innerWidth <= 480 ? 11 : 13 } }
                        },
                        tooltip: { // Tooltip configuration (shown on hover)
                            enabled: true,
                            backgroundColor: 'rgba(44, 62, 80, 0.9)', 
                            titleFont: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 12 : 13 },
                            bodyFont: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 11 : 12 },
                            padding: 10, cornerRadius: 6, 
                            callbacks: {
                                // Customize tooltip label text
                                label: function(context) {
                                    const score = context.raw;
                                    if (score === null) return 'No data';
                                    // Add qualitative status based on score
                                    let status = '';
                                    if (score >= 4.5) status = ' (Excellent)';
                                    else if (score >= 3.5) status = ' (Good)';
                                    else if (score >= 2.5) status = ' (Average)';
                                    else if (score >= 1.5) status = ' (Below Average)';
                                    else status = ' (Poor)';
                                    return `Score: ${score}${status}`;
                                },
                                // Customize tooltip title (show full metric name)
                                title: function(tooltipItems) {
                                    const dataIndex = tooltipItems[0].dataIndex;
                                    const originalMetric = filteredBreakdownKeys[dataIndex];
                                    // Format the original metric key back to readable text
                                    return originalMetric
                                        .replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())
                                        .replace(' Score', '').replace('Bmi', 'BMI').replace('Whr', 'WHR');
                                }
                            }
                        }
                    }
                }
            };

            // Clear the container and append the new canvas
            containerElement.innerHTML = ''; 
            canvas.style.minHeight = '400px'; // Ensure minimum height
            containerElement.appendChild(canvas);
            
            // Create the Chart.js instance
            const chartInstance = new Chart(canvas, config);
            debug("Score Radar Chart rendered.");
            
            // Generate a static image fallback of the chart for printing purposes
            try {
                setTimeout(() => { // Delay generation slightly to ensure chart is rendered
                    if (chartInstance) {
                        const image = chartInstance.toBase64Image('image/png', 1.0);
                        const fallbackDiv = document.createElement('div');
                        fallbackDiv.id = 'scoreChartFallbackImage';
                        fallbackDiv.className = 'chart-fallback'; // CSS handles visibility (display: none normally, block for print)
                        fallbackDiv.innerHTML = `<img src="${image}" class="chart-print-image" alt="Health Metrics Radar Chart">`;
                        containerElement.appendChild(fallbackDiv); // Append the image container
                    }
                }, 500);
            } catch (e) {
                console.log("Error creating chart fallback image:", e);
            }
        }

        /**
         * Creates and renders the Factor Impact Bar Chart using Chart.js.
         * Visualizes how much each lifestyle factor potentially increases or decreases biological age.
         * 
         * @param {object} scores - Object containing user scores.
         * @param {object} weights - Object mapping metric keys to their importance weight.
         * @param {string[]} breakdownKeys - Array of all metric keys considered for impact.
         * @param {HTMLElement} containerElement - The HTML element for the chart canvas.
         */
        function createImpactBarChart(scores, weights, breakdownKeys, containerElement) {
             debug("Creating Factor Impact Bar Chart...");
             // Ensure Chart.js is loaded
             if (!window.Chart) {
                 console.error("Chart.js not loaded!");
                 containerElement.innerHTML = '<p style="text-align:center; color: red;">Chart library not loaded.</p>';
                 return;
             }

             // Filter to include only keys present in the user's scores
             const filteredBreakdownKeys = breakdownKeys.filter(key => 
                 scores[key] !== undefined && scores[key] !== null
             );
             
             // Do not render if no valid data
             if (filteredBreakdownKeys.length === 0) {
                 containerElement.innerHTML = '<p style="text-align:center;">No data available for visualization. Please fill out at least one question.</p>';
                 return;
             }

             // Create canvas element
             const canvas = document.createElement('canvas');
             canvas.id = 'impactBarChart';
             canvas.style.maxHeight = '450px';

             // Calculate the raw impact value for each factor (weight * (score - 3))
             const diffs = filteredBreakdownKeys.map(key => {
                 const score = scores[key];
                 const weight = weights[key];
                 if (typeof score === 'number' && !isNaN(score) && typeof weight === 'number') {
                     return weight * (score - 3); // Positive value = reduces age, Negative = increases age
                 }
                 return 0; // Default to 0 if score or weight is missing
             });
             
             // --- Visual Scaling Factor --- 
             // Applies a multiplier to the impact values *only* for the bar chart display 
             // to make smaller impacts more visible. Does not affect tooltips or actual calculations.
             const visualScalingFactor = 8.0; // Adjust this multiplier to change bar heights
             const scaledDiffs = diffs.map(value => value * visualScalingFactor); // Values used for bar heights
             const originalDiffs = [...diffs]; // Keep original values for tooltips
             // --- End Visual Scaling --- 

             // Determine bar colors based on the original impact (positive impact = green, negative = red)
             const barColors = diffs.map(value => {
                 if (value > 0) { // Reduces age (Good)
                     const intensity = Math.min(1, value / 1.0); // Intensity based on magnitude
                     return `rgba(0, ${Math.floor(150 + 90 * intensity)}, 0, 0.8)`; // Shades of green
                 } else if (value < 0) { // Increases age (Bad)
                     const intensity = Math.min(1, Math.abs(value) / 1.0);
                     return `rgba(${Math.floor(150 + 90 * intensity)}, 0, 0, 0.8)`; // Shades of red
                 } else { // Neutral impact
                     return 'rgba(150, 150, 150, 0.8)'; // Grey
                 }
             });

             // Format metric keys into readable labels
             const labels = filteredBreakdownKeys.map(metric =>
                 (metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()))
                 .replace(' Score', '').replace('Bmi', 'BMI').replace('Whr', 'WHR')
             );

             // Determine Y-axis range based on scaled values to ensure visibility
             let minVal = Math.min(...scaledDiffs.filter(d => d !== null && !isNaN(d)));
             let maxVal = Math.max(...scaledDiffs.filter(d => d !== null && !isNaN(d)));
             let yMin = Math.min(-4, (minVal < -4) ? minVal - 0.5 : -4); // Add padding below minimum
             let yMax = Math.max(6, (maxVal > 6) ? maxVal + 0.5 : 6); // Add padding above maximum
             if (Math.abs(maxVal) < 1 && Math.abs(minVal) < 1) { yMin = -4; yMax = 6; } // Ensure reasonable scale for small values

             // Prepare data for Chart.js using scaled values for bar heights
             const data = {
                 labels: labels,
                 datasets: [{
                     label: 'Health Score Deviation', // Not displayed (legend hidden)
                     data: scaledDiffs, // Use scaled values for bar height
                     backgroundColor: barColors,
                     borderColor: barColors.map(color => color.replace('0.8', '1')), // Slightly darker border
                     borderWidth: 1,
                     borderRadius: 4, 
                     barPercentage: 0.7,
                     categoryPercentage: 0.85
                 }]
             };

             // Optional: Sort bars by impact value for easier comparison
             const sortByImpact = false; 
             if (sortByImpact) {
                 const combined = labels.map((label, i) => ({ label, scaledDiff: scaledDiffs[i], originalDiff: originalDiffs[i], color: barColors[i] }));
                 combined.sort((a, b) => b.scaledDiff - a.scaledDiff); // Sort descending by scaled impact
                 data.labels = combined.map(item => item.label);
                 data.datasets[0].data = combined.map(item => item.scaledDiff);
                 data.datasets[0].backgroundColor = combined.map(item => item.color);
                 data.datasets[0].borderColor = combined.map(item => item.color.replace('0.8', '1'));
                 originalDiffs.length = 0; // Re-order original values array to match sorted bars
                 combined.forEach(item => originalDiffs.push(item.originalDiff));
             }

             // Configure Chart.js options
             const config = {
                 type: 'bar',
                 data: data,
                 options: {
                     responsive: true,
                     maintainAspectRatio: false, // Allow chart height to adjust
                     indexAxis: 'x', // Vertical bars
                     scales: {
                         y: { // Vertical axis (Impact Scale)
                             min: yMin, max: yMax,
                             grid: { color: 'rgba(0, 0, 0, 0.05)' },
                             ticks: {
                                 font: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 10 : 11 },
                                 color: '#86868b',
                                 // Display simplified ticks (representing scaled impact)
                                 callback: function(value) { return value.toFixed(0); }
                             },
                             title: { // Y-axis title
                                 display: true,
                                 text: 'Impact on Biological Age (years)',
                                 font: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 11 : 12, weight: 'bold' },
                                 color: '#2C3E50',
                                 padding: {top: 0, bottom: 10}
                             }
                         },
                         x: { // Horizontal axis (Factors)
                             grid: { display: false }, // Hide vertical grid lines
                             ticks: {
                                 font: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 9 : 11 },
                                 color: '#1d1d1f',
                                 maxRotation: 45, // Rotate labels if needed
                                 minRotation: window.innerWidth <= 480 ? 45 : 0,
                                 autoSkip: true, // Skip labels if too crowded
                                 maxTicksLimit: window.innerWidth <= 480 ? 8 : 12 // Max labels on mobile
                             }
                         }
                     },
                     plugins: {
                         legend: { display: false }, // Hide default legend
                         tooltip: { // Tooltip configuration
                             enabled: true,
                             backgroundColor: 'rgba(0, 0, 0, 0.8)',
                             titleFont: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 12 : 13 },
                             bodyFont: { family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif', size: window.innerWidth <= 480 ? 11 : 12 },
                             padding: 10,
                             callbacks: {
                                 title: function(context) { return context[0].label; }, // Tooltip title is the factor name
                                 // Display the ORIGINAL (unscaled) impact value in the tooltip
                                 label: function(context) {
                                     const index = context.dataIndex;
                                     const originalValue = originalDiffs[index]; // Get original value using index
                                     if (originalValue === null || isNaN(originalValue)) return 'No data';
                                     if (originalValue > 0) {
                                         return `Reduces biological age by ${originalValue.toFixed(2)} years`;
                                     } else if (originalValue < 0) {
                                         return `Increases biological age by ${Math.abs(originalValue).toFixed(2)} years`;
                                     } else {
                                         return 'No impact on biological age';
                                     }
                                 }
                             }
                         }
                     }
                 }
             };

             // Add chart title and subtitle to the container
             const title = document.createElement('h4');
             title.className = 'chart-title';
             title.textContent = 'Factor Impact';
             const subtitle = document.createElement('p');
             subtitle.className = 'chart-subtitle';
             subtitle.textContent = 'How each factor affects your biological age';
             subtitle.style.textAlign = 'center'; subtitle.style.fontSize = '14px'; subtitle.style.marginTop = '5px'; subtitle.style.color = '#5a5a5a';
             
             // Add a zero line using the annotation plugin for visual reference
             if (window.ChartAnnotation || typeof Chart.Annotation !== 'undefined') {
             config.options.plugins.annotation = {
                 annotations: {
                         zeroLine: { type: 'line', yMin: 0, yMax: 0, borderColor: 'rgba(0, 0, 0, 0.3)', borderWidth: 1, borderDash: [4, 4] }
                     }
                 };
             }
             
             // Clear container, add title/subtitle, and render the chart
             containerElement.innerHTML = ''; 
             containerElement.appendChild(title);
             containerElement.appendChild(subtitle);
             containerElement.appendChild(canvas);
             new Chart(canvas, config); // Initialize the chart
             
             // Create a custom legend explaining colors and visual scaling
             const legend = document.createElement('div');
             legend.className = 'chart-custom-legend';
             legend.style.display = 'flex'; legend.style.justifyContent = 'center'; legend.style.alignItems = 'center'; legend.style.marginTop = '15px'; legend.style.fontSize = '13px'; legend.style.flexWrap = 'wrap';
             legend.innerHTML = `
                <div style="display: flex; align-items: center; margin-right: 20px; margin-bottom: 5px;">
                    <span style="display: inline-block; width: 12px; height: 12px; background-color: rgba(0, 200, 0, 0.8); margin-right: 5px;"></span>
                    <span>Reduces age</span>
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 5px;">
                    <span style="display: inline-block; width: 12px; height: 12px; background-color: rgba(200, 0, 0, 0.8); margin-right: 5px;"></span>
                    <span>Increases age</span>
                </div>
             `;
             const scalingNote = document.createElement('div');
             scalingNote.style.fontSize = '11px'; scalingNote.style.color = '#888'; scalingNote.style.textAlign = 'center'; scalingNote.style.marginTop = '5px'; scalingNote.style.width = '100%';
             scalingNote.innerHTML = `<i>Note: Chart bars are visually scaled. Tooltips show actual calculated impact.</i>`;
             legend.appendChild(scalingNote);
             containerElement.appendChild(legend);
             
             debug("Factor Impact Bar Chart rendered with visual scaling factor: " + visualScalingFactor);
             
             // Generate static image fallback for printing
             try {
                 setTimeout(() => { // Delay to ensure render
                     const chartInstance = Chart.getChart(canvas);
                     if (chartInstance) {
                         chartInstance.toBase64Image('image/png', 1.0).then(image => {
                             const fallbackDiv = document.createElement('div');
                             fallbackDiv.id = 'impactChartFallbackImage';
                             fallbackDiv.className = 'chart-fallback'; // CSS handles visibility
                             fallbackDiv.innerHTML = `<img src="${image}" class="chart-print-image" alt="Factor Impact Chart">`;
                             containerElement.appendChild(fallbackDiv);
                         });
                     }
                 }, 500);
             } catch (e) {
                 console.log("Error creating chart fallback image:", e);
             }
        }

        // --- Display & Form Handling ---

        // *** NEW: Function to add the Generate Report button ***
        function addGenerateReportButton() {
            const container = document.getElementById('generateReportContainer');
            if (!container) {
                console.error("Generate Report Button container not found!");
                return;
            }

            // Clear previous button/message if any
            container.innerHTML = ''; 

            // Create the button
            const button = document.createElement('button');
            button.id = 'sendToMakeButton';
            button.className = 'nav-btn submit-btn'; // Use existing button styles
            button.textContent = 'Generate & Email PDF Report';
            button.style.minWidth = '260px'; // Adjust width if needed

            // Add click listener
            button.addEventListener('click', function(e) {
                e.preventDefault(); // Prevent default button action
                triggerSendToMakeWebhook(this); // Pass button element for feedback
            });

            // Append the button to the container
            container.appendChild(button);
            debug("Generate Report button added.");
        }

        // *** NEW: Function to trigger the second AJAX call to send data to Make.com ***
        function triggerSendToMakeWebhook(buttonElement) {
            if (!completeFormDataForWebhook) {
                console.error("Cannot send to webhook: completeFormDataForWebhook is null.");
                alert("Error: Data not ready for report generation. Please recalculate results.");
                return;
            }
            
             if (!window.longevity_form_data || !window.longevity_form_data.make_nonce) {
                console.error("Make.com nonce is missing!");
                alert("Security error. Cannot send report request.");
                return;
            }

            debug("Sending complete data to Make.com webhook:", completeFormDataForWebhook);

            // Provide visual feedback
            const originalButtonText = buttonElement.textContent;
            buttonElement.textContent = 'Sending Request...';
            buttonElement.disabled = true;
            buttonElement.style.opacity = '0.7';
            buttonElement.style.cursor = 'not-allowed';

            // Make the AJAX request
            $.ajax({
                url: window.longevity_form_data.ajax_url,
                type: 'POST',
                data: {
                    action: 'send_to_make', // The new PHP action handle
                    security: window.longevity_form_data.make_nonce, // The new nonce
                    complete_data: JSON.stringify(completeFormDataForWebhook) // Send the stored complete data
                },
                success: function(response) {
                    debug("Send to Make response:", response);
                    if (response.success) {
                        buttonElement.textContent = 'Request Sent Successfully!';
                        // Optionally change style or remove button after success
                        buttonElement.style.backgroundColor = '#28a745'; // Green for success
                        buttonElement.style.opacity = '1';
                        // setTimeout(() => { container.innerHTML = '<p style="color: green;'>Report request sent!</p>'; }, 2000); 
                    } else {
                        buttonElement.textContent = 'Error Sending Request';
                        buttonElement.style.backgroundColor = '#dc3545'; // Red for error
                        buttonElement.disabled = false; // Re-enable on error
                        buttonElement.style.opacity = '1';
                        buttonElement.style.cursor = 'pointer';
                        alert('Error: ' + (response.data.message || 'Could not send report request.'));
                    }
                },
                error: function(xhr, status, error) {
                    debug("Send to Make AJAX error:", {xhr: xhr, status: status, error: error});
                    buttonElement.textContent = 'Connection Error';
                    buttonElement.style.backgroundColor = '#dc3545'; // Red for error
                    buttonElement.disabled = false; // Re-enable on error
                    buttonElement.style.opacity = '1';
                    buttonElement.style.cursor = 'pointer';
                    alert('Connection error. Please check your internet connection and try again.');
                },
                complete: function() {
                    // Optionally re-enable the button after a delay, even on success, if needed
                    // setTimeout(() => {
                    //    buttonElement.textContent = originalButtonText;
                    //    buttonElement.disabled = false;
                    //    buttonElement.style.opacity = '1';
                    //    buttonElement.style.cursor = 'pointer';
                    //    buttonElement.style.backgroundColor = ''; // Reset color
                    // }, 3000); 
                }
            });
        }

        async function displayResultsAndSendWebhook(formData, scores, calculations, answersText, aiResults) {
            console.log('Final data before sending to webhook:', { formData, scores, calculations, answersText, aiResults });
            hideSpinner(); // Hide spinner before showing results

            // --- Display Results on Page (existing code) ---
            // ... (code for displaying BMI, WHR, Bio Age, Charts, Factors, etc. on the page)
            // ... This part might need updating to store calculated values/chart URLs if not already done
            // Ensure calculations like lifestyle_score_value are available here


            // --- Prepare final payload for Make.com --- 
            const combinedDataForWebhook = {
                // Existing data
                ...formData,         // Includes name, email, age, gender, challenges, goals etc.
                ...calculations,     // Includes bmi, bmiCategory, whr, whrCategory, biologicalAge, ageShift, agingRate, positive_factors, negative_factors etc.
                scores: scores,          // Includes all individual scores (physicalActivity, sleepDuration, etc.)
                answersText: answersText,    // Textual representation of selected answers
                ai_results: aiResults,     // Results from the AI analysis endpoint
                
                // --- NEW fields to match pdfmonkeytemplate.txt ---
                logo_url: "YOUR_DEFAULT_LOGO_URL_HERE", // Replace with actual logo URL (maybe from config?)
                contact_email: formData.practitionerEmail || "YOUR_DEFAULT_CONTACT_EMAIL", // Use practitioner email or default
                scheduling_link: "YOUR_DEFAULT_SCHEDULING_LINK", // Replace with actual scheduling link
                
                // Add the numeric lifestyle score value (ensure 'calculations' includes this)
                lifestyle_score_value: calculations.lifestyleScoreValue || scores.overallHealthScore || null, // Example: Get it from calculations or scores

                // Chart URLs (Replace placeholders with actual generated chart URLs)
                biological_age_chart_url: calculations.biologicalAgeChartUrl || "", 
                lifestyle_score_chart_url: calculations.lifestyleScoreChartUrl || "",
                body_composition_chart_url: calculations.bodyCompositionChartUrl || "",
                age_impact_chart_url: calculations.ageImpactChartUrl || "",
                detailed_scores_chart_url: calculations.detailedScoresChartUrl || ""
            };
            
            console.log('Data being sent to webhook:', combinedDataForWebhook);
            
            // Show the 'Send to Practitioner' button only after results are ready
            const sendButton = document.getElementById('sendToPractitionerBtn');
            if (sendButton) {
                sendButton.style.display = 'inline-block';
                sendButton.disabled = false;
                
                // Remove previous listeners if any to prevent multiple calls
                const newSendButton = sendButton.cloneNode(true);
                sendButton.parentNode.replaceChild(newSendButton, sendButton);
                
                newSendButton.addEventListener('click', function() {
                    // *** MODIFIED: Send the global object which includes AI results ***
                    sendToMakeWebhook(completeFormDataForWebhook); 
                });
            }
             // Display results section
            const resultsSection = document.getElementById('resultsSection');
            if(resultsSection) resultsSection.style.display = 'block';
            
            // Scroll to results
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }

        // *** NEW Function to handle sending data to Make.com Webhook via Button ***
        function sendToMakeWebhook(dataToSend) {
            showSpinner('Sending report request...'); // Show spinner for webhook call
            const sendButton = document.getElementById('sendToPractitionerBtn');
            if(sendButton) sendButton.disabled = true; // Disable button during sending

            console.log("Sending this data to Make webhook handler:", dataToSend);

            jQuery.ajax({
                url: longevity_form_data.ajax_url,
                type: 'POST',
                data: {
                    action: 'handle_send_to_make_webhook',
                    security: longevity_form_data.make_nonce, // Use the new nonce
                    complete_data: JSON.stringify(dataToSend) // Send the complete combined data
                },
                success: function(response) {
                    hideSpinner();
                    if (response.success) {
                        console.log('Webhook send success:', response.data.message);
                         // Display success message inline
                        const resultsDiv = document.getElementById('resultsSection');
                        if(resultsDiv) {
                            const successMsgDiv = document.createElement('div');
                            successMsgDiv.className = 'webhook-status success';
                            successMsgDiv.innerHTML = `✅ ${response.data.message || 'Report request sent successfully!'}`;
                            // Insert after the button or at the end of results
                            const buttonContainer = document.querySelector('.results-actions');
                            if (buttonContainer) {
                                buttonContainer.appendChild(successMsgDiv);
                            } else {
                                resultsDiv.appendChild(successMsgDiv);
                            }
                        }
                        if(sendButton) sendButton.style.display = 'none'; // Hide button after success
                    } else {
                        console.error('Webhook send error:', response.data.message);
                        // Display error message inline
                        const resultsDiv = document.getElementById('resultsSection');
                        if(resultsDiv) {
                            const errorMsgDiv = document.createElement('div');
                            errorMsgDiv.className = 'webhook-status error';
                            errorMsgDiv.innerHTML = `❌ Error: ${response.data.message || 'Failed to send report request.'}`;
                            const buttonContainer = document.querySelector('.results-actions');
                            if (buttonContainer) {
                                buttonContainer.appendChild(errorMsgDiv);
                            } else {
                                resultsDiv.appendChild(errorMsgDiv);
                            }
                        }
                         if(sendButton) sendButton.disabled = false; // Re-enable button on failure
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    hideSpinner();
                    console.error('AJAX error sending to webhook:', textStatus, errorThrown);
                     // Display AJAX error message inline
                     const resultsDiv = document.getElementById('resultsSection');
                     if(resultsDiv) {
                            const errorMsgDiv = document.createElement('div');
                            errorMsgDiv.className = 'webhook-status error';
                            errorMsgDiv.innerHTML = `❌ Network Error: Could not send report request. Please try again. (${textStatus})`;
                            const buttonContainer = document.querySelector('.results-actions');
                            if (buttonContainer) {
                                buttonContainer.appendChild(errorMsgDiv);
                            } else {
                                resultsDiv.appendChild(errorMsgDiv);
                            }
                     }
                    if(sendButton) sendButton.disabled = false; // Re-enable button on AJAX failure
                }
            });
        }

        // --- NEW: QuickChart URL Generation Functions ---

        /**
         * Generates a QuickChart URL for a simple bar chart comparing Chronological and Biological Age.
         * @param {number} chronologicalAge - User's actual age.
         * @param {number} biologicalAge - Calculated biological age.
         * @returns {string} - The QuickChart URL or empty string if data is invalid.
         */
        function generateBioAgeComparisonChartUrl(chronologicalAge, biologicalAge) {
            if (isNaN(chronologicalAge) || isNaN(biologicalAge)) return '';
            
            const chartConfig = {
                type: 'bar',
                data: {
                    labels: ['Chronological Age', 'Biological Age'],
                    datasets: [{
                        label: 'Age',
                        data: [chronologicalAge, biologicalAge.toFixed(1)],
                        backgroundColor: ['rgba(100, 100, 100, 0.7)', biologicalAge > chronologicalAge ? 'rgba(255, 99, 132, 0.7)' : 'rgba(75, 192, 192, 0.7)'],
                        borderColor: ['rgba(100, 100, 100, 1)', biologicalAge > chronologicalAge ? 'rgba(255, 99, 132, 1)' : 'rgba(75, 192, 192, 1)'],
                        borderWidth: 1
                    }]
                },
                options: {
                    title: { display: true, text: 'Biological vs. Chronological Age' },
                    legend: { display: false },
                    // Use scales with x/y for Chart.js v3+
                    scales: { y: { ticks: { beginAtZero: true, suggestedMax: Math.max(chronologicalAge, biologicalAge) + 10 } } }
                }
            };
            // Make background transparent and set size
            chartConfig.options.plugins = { background_color: 'transparent' };
            chartConfig.width = 500; chartConfig.height = 300;

            return `https://quickchart.io/chart?encoding=url&c=${encodeURIComponent(JSON.stringify(chartConfig))}`;
        }

        /**
         * Generates a QuickChart URL for an Aging Rate gauge chart.
         * @param {number} agingRate - Calculated aging rate.
         * @returns {string} - The QuickChart URL or empty string if data is invalid.
         */
        function generateAgingRateGaugeChartUrl(agingRate) {
            if (isNaN(agingRate)) return '';
            const rate = parseFloat(agingRate.toFixed(2));
            // Determine main color based on rate
            const color = rate > 1.05 ? '#F58220' : (rate < 0.95 ? '#00A99D' : '#CCCCCC'); // Orange, Teal, Grey

            const chartConfig = {
                type: 'gauge',
                data: {
                    datasets: [{
                        value: rate,
                        minValue: 0.6,
                        maxValue: 1.4,
                        backgroundColor: color, // Apply the determined color
                        // Define zones for background color segments
                        data: [0.95, 1.05], // Points separating zones
                        backgroundColor: [ // Colors for zones (Slower, Average, Faster)
                            '#00A99D', // Color for values < 0.95 (Slower)
                            '#CCCCCC', // Color for values between 0.95 and 1.05 (Average)
                            '#F58220'  // Color for values > 1.05 (Faster)
                        ]
                    }]
                },
                options: {
                    title: { display: true, text: 'Aging Rate' },
                    valueLabel: { // Display the numeric value
                        display: true, 
                        fontSize: 20, 
                        color: '#333',
                        formatter: (value) => value.toFixed(2) 
                    },
                    plugins: {
                        datalabels: { display: false }, // Hide default datalabels
                        // Add gauge needle configuration if needed by QuickChart or use default
                        gaugeNeedle: {
                            color: '#4A4A4A',
                            innerRadius: -10,
                            outerRadius: 80
                        },
                         background_color: 'transparent' // Transparent background
                    }
                }
            };
            chartConfig.width = 400; chartConfig.height = 250;

            return `https://quickchart.io/chart?encoding=url&c=${encodeURIComponent(JSON.stringify(chartConfig))}`;
        }

        /**
         * Generates a QuickChart URL for a Radar chart of detailed health scores.
         * @param {object} scores - Object containing scores for each metric.
         * @param {string[]} orderedMetricKeys - Array of metric keys in the desired display order.
         * @returns {string} - The QuickChart URL or empty string if data is invalid.
         */
        function generateDetailedScoresRadarChartUrl(scores, orderedMetricKeys) {
            if (!scores || orderedMetricKeys.length === 0) return '';

            const formatLabel = (label) => {
                 let formattedLabel = label.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).replace(' Score', '').replace('Bmi', 'BMI').replace('Whr', 'WHR');
                 return formattedLabel.length > 15 ? formattedLabel.substring(0, 13) + '...' : formattedLabel;
            };

            const labels = orderedMetricKeys.map(metric => formatLabel(metric));
            const dataValues = orderedMetricKeys.map(metric => scores[metric] !== undefined && !isNaN(scores[metric]) ? scores[metric] : 0); // Default to 0

            const chartConfig = {
                type: 'radar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Health Metrics (0-5)',
                        data: dataValues,
                        fill: true,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(0, 122, 255, 0.8)',
                        pointBackgroundColor: 'rgba(0, 122, 255, 0.8)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(0, 122, 255, 1)'
                    }]
                },
                options: {
                    title: { display: true, text: 'Detailed Assessment Scores' },
                    // Use scales.r for Chart.js v3/v4
                    scales: { 
                       r: { min: 0, max: 5, beginAtZero: true, stepSize: 1, pointLabels: { fontSize: 10 } } 
                    },
                     plugins: { legend: { position: 'top' }, background_color: 'transparent' } // Transparent background
                }
            };
            chartConfig.width = 500; chartConfig.height = 500; // Radar charts often look better square

            return `https://quickchart.io/chart?encoding=url&c=${encodeURIComponent(JSON.stringify(chartConfig))}`;
        }

        /**
         * Generates a QuickChart URL for a Bar chart showing top age impact factors.
         * @param {array} positiveFactors - Array of top {name, impact, description} objects.
         * @param {array} negativeFactors - Array of top {name, impact, description} objects.
         * @returns {string} - The QuickChart URL or empty string if data is invalid.
         */
        function generateAgeImpactBarChartUrl(positiveFactors, negativeFactors) {
             // Combine top 3 positive (inverted impact) and top 3 negative
            const factors = [
                ...positiveFactors.slice(0, 3).map(f => ({ name: f.name, impact: f.impact * -1 })), // Invert positive impact
                ...negativeFactors.slice(0, 3).map(f => ({ name: f.name, impact: f.impact }))      // Keep negative impact
            ].sort((a, b) => a.impact - b.impact); // Sort: most age-reducing first

             if (factors.length === 0) return '';

            const labels = factors.map(f => f.name);
            const dataValues = factors.map(f => f.impact.toFixed(1));
            // Green for negative impact (age reduction), Red for positive impact (age increase)
            const backgroundColors = factors.map(f => f.impact < 0 ? 'rgba(75, 192, 192, 0.7)' : 'rgba(255, 99, 132, 0.7)');

            const chartConfig = {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Impact on Biological Age (Years)',
                        data: dataValues,
                        backgroundColor: backgroundColors,
                        borderColor: backgroundColors.map(c => c.replace('0.7', '1')),
                        borderWidth: 1
                    }]
                },
                options: {
                    title: { display: true, text: 'Top Age Impact Factors' },
                    legend: { display: false },
                     // Use scales with x/y for Chart.js v3/v4
                     scales: { 
                        x: { title: { display: true, text: 'Factor' } },
                        y: { title: { display: true, text: 'Impact (Years)' } /* No beginAtZero needed here */ }
                     },
                     plugins: { 
                         tooltip: { 
                             callbacks: { 
                                label: function(context) { 
                                    let value = parseFloat(context.raw);
                                    return value < 0 ? `Reduces Age by ${Math.abs(value).toFixed(1)} yrs` : `Increases Age by ${value.toFixed(1)} yrs`;
                                } 
                             } 
                         },
                         background_color: 'transparent' // Transparent background
                    }
                }
            };
            chartConfig.width = 500; chartConfig.height = 350;

            return `https://quickchart.io/chart?encoding=url&c=${encodeURIComponent(JSON.stringify(chartConfig))}`;
        }

        // --- End NEW QuickChart Functions ---

        // --- Chart Creation Functions ---

    })(jQuery); // Pass jQuery to the closure to use the `$` alias safely
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('longevity_form', 'longevity_assessment_form');


